{"version":3,"file":"router.umd.min.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData\n  status?: number;\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  unstable_actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  unstable_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n\n      let actionData: Record<string, RouteData> | null | undefined;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data as any,\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData !== undefined ? { actionData } : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type, status } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result, statusCode: status };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],"names":["Action","PopStateEventType","invariant","value","message","Error","warning","cond","console","warn","e","getHistoryState","location","index","usr","state","key","idx","createLocation","current","to","_extends","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","options","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","getIndex","handlePop","nextIndex","delta","createURL","base","origin","href","replace","URL","replaceState","listen","fn","addEventListener","removeEventListener","encodeLocation","url","push","Push","historyState","pushState","error","DOMException","name","assign","Replace","go","n","ResultType","immutableRouteKeys","Set","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","map","route","treePath","id","join","children","isIndexRoute","indexRoute","pathOrLayoutRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","DeferredData","constructor","responseInit","reject","this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","entries","acc","_ref2","trackPromise","done","init","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","async","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","_tracked","isTrackedPromise","_error","_data","defer","redirect","status","headers","Headers","set","Response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","json","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","UNSAFE_DEFERRED_SYMBOL","Symbol","throwStaticHandlerAbortedError","request","isRouteRequest","future","v7_throwAbortReason","reason","method","normalizeTo","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeNavigateOptions","normalizeFormMethod","isFetcher","opts","body","isSubmissionNavigation","isValidMethod","getInternalRouterError","searchParams","getInvalidBodyError","type","rawFormMethod","toUpperCase","stripHashFromPath","isMutationMethod","FormData","URLSearchParams","_ref5","String","submission","parse","convertFormDataToSearchParams","convertSearchParamsToFormData","append","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","m","getMatchesToLoad","isInitialLoad","skipActionErrorRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","deletedFetchers","fetchLoadMatches","fetchRedirectIds","routesToUse","pendingActionResult","actionResult","isErrorResult","currentUrl","nextUrl","actionStatus","statusCode","shouldSkipRevalidation","navigationMatches","lazy","loader","hydrate","errors","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","unstable_actionStatus","defaultShouldRevalidate","isNewRouteInstance","revalidatingFetchers","f","routeId","has","fetcherMatches","fetcher","fetchers","fetcherMatch","getTargetMatch","shouldRevalidate","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","defaultDataStrategy","all","callDataStrategyImpl","dataStrategyImpl","matchesToLoad","requestContext","routeIdsToLoad","loadedMatches","results","shouldLoad","handlerOverride","staticContext","onReject","runHandler","handler","handlerPromise","actualHandler","ctx","context","handlerError","callLoaderOrAction","convertHandlerResultToDataResult","handlerResult","isResponse","contentType","isDeferredData","deferred","deferredData","_result$init","_result$init2","normalizeRelativeRoutingRedirectResponse","response","trimmedMatches","normalizeRedirectLocation","normalizedLocation","protocol","isSameBasename","createClientSideRequest","Request","processRouteLoaderData","activeDeferreds","skipLoaderErrorBubbling","foundError","loaderHeaders","pendingError","isRedirectResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","doneFetcher","getDoneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","hasOwnProperty","getActionDataForCommit","actionData","reverse","find","getShortCircuitMatches","_temp5","errorMessage","findRedirect","isRedirectHandlerResult","resolveData","resolveDeferredResults","currentMatches","signals","isRevalidatingLoader","resolveDeferredData","unwrap","getAll","getSubmissionFromNavigation","navigation","getLoadingNavigation","getSubmittingNavigation","getLoadingFetcher","querySelector","getAttribute","initialEntries","initialIndex","entry","createMemoryLocation","clampIndex","min","max","getCurrentLocation","nextLocation","splice","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","inFlightDataRoutes","initialized","dataRoutes","unstable_dataStrategy","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unstable_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","router","hasLazyRoutes","hasLoaders","isRouteInitialized","pendingNavigationController","historyAction","restoreScrollPosition","preventScrollReset","revalidation","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","activeFetchers","blockerFunctions","ignoreNextHistoryUpdate","updateState","newState","completedFetchers","deletedFetchersKeys","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","deleteFetcher","completeNavigation","_temp","_location$state","_location$state2","isActionReload","_isRedirect","keys","priorPaths","currentLocation","toPaths","getSavedScrollPosition","startNavigation","startUninterruptedRevalidation","getScrollKey","saveScrollPosition","enableViewTransition","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","interruptActiveLoads","actionMatch","callDataStrategy","shortCircuited","startRedirectNavigation","handleAction","fetcherSubmission","initialHydration","activeSubmission","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","abortFetcher","abortPendingFetchRevalidations","loaderResults","callLoadersAndMaybeResolveData","fetcherKey","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","handleLoaders","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","fetchersToLoad","updateFetcherState","setFetcherError","getFetcher","markFetchersDone","doneKeys","landedId","yeetedKeys","deleteBlocker","updateBlocker","newBlocker","blocker","shouldBlockNavigation","_ref4","blockerKey","blockerFunction","predicate","cancelledRouteIds","dfd","y","initialize","_window","transitions","sessionPositions","sessionStorage","getItem","restoreAppliedTransitions","_saveAppliedTransitions","setItem","persistAppliedTransitions","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizedPath","userReplace","unstable_viewTransition","fetch","requestMatches","existingFetcher","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","revalidationRequest","loadId","loadFetcher","staleKey","handleFetcherAction","handleFetcherLoader","revalidate","count","dispose","clear","getBlocker","_internalFetchControllers","_internalActiveDeferreds","_internalSetRoutes","newRoutes","queryImpl","routeMatch","Location","actionHeaders","loaderRequest","loadRouteData","submit","isHandlerResult","isRedirectResponse","executedLoaders","fromEntries","query","_temp3","methodNotAllowedMatches","queryRoute","_temp4","values","_result$activeDeferre","originalPath","prefix","p","array","keyMatch","optional","param","_deepestRenderedBoundaryId","redirectDocument"],"mappings":";;;;;;;;;;udAOYA,IAAAA,WAAAA,GAAM,OAANA,EAAM,IAAA,MAANA,EAAM,KAAA,OAANA,EAAM,QAAA,UAANA,CAAM,EAAA,IA2LlB,MAAMC,EAAoB,WAySnB,SAASC,EAAUC,EAAYC,GACpC,IAAc,IAAVD,SAAmBA,EACrB,MAAM,IAAIE,MAAMD,EAEpB,CAEO,SAASE,EAAQC,EAAWH,GACjC,IAAKG,EAAM,CAEc,oBAAZC,SAAyBA,QAAQC,KAAKL,GAEjD,IAME,MAAM,IAAIC,MAAMD,EAEL,CAAX,MAAOM,GAAI,CACf,CACF,CASA,SAASC,EAAgBC,EAAoBC,GAC3C,MAAO,CACLC,IAAKF,EAASG,MACdC,IAAKJ,EAASI,IACdC,IAAKJ,EAET,CAKO,SAASK,EACdC,EACAC,EACAL,EACAC,GAcA,YAfU,IAAVD,IAAAA,EAAa,MAGmBM,EAAA,CAC9BC,SAA6B,iBAAZH,EAAuBA,EAAUA,EAAQG,SAC1DC,OAAQ,GACRC,KAAM,IACY,iBAAPJ,EAAkBK,EAAUL,GAAMA,EAAE,CAC/CL,QAKAC,IAAMI,GAAOA,EAAgBJ,KAAQA,GAjChCU,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAoC9C,CAKO,SAASC,EAAUC,GAIR,IAJST,SACzBA,EAAW,IAAGC,OACdA,EAAS,GAAEC,KACXA,EAAO,IACOO,EAKd,OAJIR,GAAqB,MAAXA,IACZD,GAAiC,MAArBC,EAAOS,OAAO,GAAaT,EAAS,IAAMA,GACpDC,GAAiB,MAATA,IACVF,GAA+B,MAAnBE,EAAKQ,OAAO,GAAaR,EAAO,IAAMA,GAC7CF,CACT,CAKO,SAASG,EAAUQ,GACxB,IAAIC,EAA4B,CAAA,EAEhC,GAAID,EAAM,CACR,IAAIE,EAAYF,EAAKG,QAAQ,KACzBD,GAAa,IACfD,EAAWV,KAAOS,EAAKJ,OAAOM,GAC9BF,EAAOA,EAAKJ,OAAO,EAAGM,IAGxB,IAAIE,EAAcJ,EAAKG,QAAQ,KAC3BC,GAAe,IACjBH,EAAWX,OAASU,EAAKJ,OAAOQ,GAChCJ,EAAOA,EAAKJ,OAAO,EAAGQ,IAGpBJ,IACFC,EAAWZ,SAAWW,EAE1B,CAEA,OAAOC,CACT,CASA,SAASI,EACPC,EACAC,EACAC,EACAC,QAA0B,IAA1BA,IAAAA,EAA6B,CAAA,GAE7B,IAAIC,OAAEA,EAASC,SAASC,YAAYC,SAAEA,GAAW,GAAUJ,EACvDK,EAAgBJ,EAAOK,QACvBC,EAASjD,EAAOkD,IAChBC,EAA4B,KAE5BtC,EAAQuC,IASZ,SAASA,IAEP,OADYL,EAAchC,OAAS,CAAEE,IAAK,OAC7BA,GACf,CAEA,SAASoC,IACPJ,EAASjD,EAAOkD,IAChB,IAAII,EAAYF,IACZG,EAAqB,MAAbD,EAAoB,KAAOA,EAAYzC,EACnDA,EAAQyC,EACJH,GACFA,EAAS,CAAEF,SAAQrC,SAAUoC,EAAQpC,SAAU2C,SAEnD,CA+CA,SAASC,EAAUpC,GAIjB,IAAIqC,EACyB,SAA3Bd,EAAO/B,SAAS8C,OACZf,EAAO/B,SAAS8C,OAChBf,EAAO/B,SAAS+C,KAElBA,EAAqB,iBAAPvC,EAAkBA,EAAKU,EAAWV,GASpD,OALAuC,EAAOA,EAAKC,QAAQ,KAAM,OAC1B1D,EACEuD,EACsEE,sEAAAA,GAEjE,IAAIE,IAAIF,EAAMF,EACvB,CApFa,MAAT5C,IACFA,EAAQ,EACRkC,EAAce,aAAYzC,EAAM0B,CAAAA,EAAAA,EAAchC,MAAK,CAAEE,IAAKJ,IAAS,KAoFrE,IAAImC,EAAmB,CACjBC,aACF,OAAOA,CACR,EACGrC,eACF,OAAO2B,EAAYI,EAAQI,EAC5B,EACDgB,OAAOC,GACL,GAAIb,EACF,MAAM,IAAI9C,MAAM,8CAKlB,OAHAsC,EAAOsB,iBAAiBhE,EAAmBoD,GAC3CF,EAAWa,EAEJ,KACLrB,EAAOuB,oBAAoBjE,EAAmBoD,GAC9CF,EAAW,IAAI,CAElB,EACDX,WAAWpB,GACFoB,EAAWG,EAAQvB,GAE5BoC,YACAW,eAAe/C,GAEb,IAAIgD,EAAMZ,EAAUpC,GACpB,MAAO,CACLE,SAAU8C,EAAI9C,SACdC,OAAQ6C,EAAI7C,OACZC,KAAM4C,EAAI5C,KAEb,EACD6C,KAlGF,SAAcjD,EAAQL,GACpBkC,EAASjD,EAAOsE,KAChB,IAAI1D,EAAWM,EAAe8B,EAAQpC,SAAUQ,EAAIL,GAChD0B,GAAkBA,EAAiB7B,EAAUQ,GAEjDP,EAAQuC,IAAa,EACrB,IAAImB,EAAe5D,EAAgBC,EAAUC,GACzCuD,EAAMpB,EAAQR,WAAW5B,GAG7B,IACEmC,EAAcyB,UAAUD,EAAc,GAAIH,EAY5C,CAXE,MAAOK,GAKP,GAAIA,aAAiBC,cAA+B,mBAAfD,EAAME,KACzC,MAAMF,EAIR9B,EAAO/B,SAASgE,OAAOR,EACzB,CAEItB,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAUoC,EAAQpC,SAAU2C,MAAO,GAE1D,EAuEEK,QArEF,SAAiBxC,EAAQL,GACvBkC,EAASjD,EAAO6E,QAChB,IAAIjE,EAAWM,EAAe8B,EAAQpC,SAAUQ,EAAIL,GAChD0B,GAAkBA,EAAiB7B,EAAUQ,GAEjDP,EAAQuC,IACR,IAAImB,EAAe5D,EAAgBC,EAAUC,GACzCuD,EAAMpB,EAAQR,WAAW5B,GAC7BmC,EAAce,aAAaS,EAAc,GAAIH,GAEzCtB,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAUoC,EAAQpC,SAAU2C,MAAO,GAE1D,EAyDEuB,GAAGC,GACMhC,EAAc+B,GAAGC,IAI5B,OAAO/B,CACT,CC7tBYgC,IAAAA,WAAAA,GAAU,OAAVA,EAAU,KAAA,OAAVA,EAAU,SAAA,WAAVA,EAAU,SAAA,WAAVA,EAAU,MAAA,QAAVA,CAAU,EAAA,CAAA,GA8Qf,MAAMC,EAAqB,IAAIC,IAAuB,CAC3D,OACA,gBACA,OACA,KACA,QACA,aA6JK,SAASC,EACdC,EACAC,EACAC,EACAC,GAEA,YAHoB,IAApBD,IAAAA,EAAuB,SACA,IAAvBC,IAAAA,EAA0B,CAAA,GAEnBH,EAAOI,KAAI,CAACC,EAAO5E,KACxB,IAAI6E,EAAW,IAAIJ,EAAYzE,GAC3B8E,EAAyB,iBAAbF,EAAME,GAAkBF,EAAME,GAAKD,EAASE,KAAK,KAWjE,GAVA1F,GACkB,IAAhBuF,EAAM5E,QAAmB4E,EAAMI,SAAQ,6CAGzC3F,GACGqF,EAASI,GACV,qCAAqCA,EAArC,qEAvBN,SACEF,GAEA,OAAuB,IAAhBA,EAAM5E,KACf,CAuBQiF,CAAaL,GAAQ,CACvB,IAAIM,EAAwC1E,EAAA,CAAA,EACvCoE,EACAJ,EAAmBI,GAAM,CAC5BE,OAGF,OADAJ,EAASI,GAAMI,EACRA,CACT,CAAO,CACL,IAAIC,EAAkD3E,EAAA,CAAA,EACjDoE,EACAJ,EAAmBI,GAAM,CAC5BE,KACAE,cAAUI,IAaZ,OAXAV,EAASI,GAAMK,EAEXP,EAAMI,WACRG,EAAkBH,SAAWV,EAC3BM,EAAMI,SACNR,EACAK,EACAH,IAIGS,CACT,IAEJ,CAOO,SAASE,EAGdd,EACAe,EACAC,QAAQ,IAARA,IAAAA,EAAW,KAEX,IAGI9E,EAAW+E,GAFU,iBAAhBF,EAA2B1E,EAAU0E,GAAeA,GAEvB7E,UAAY,IAAK8E,GAEvD,GAAgB,MAAZ9E,EACF,OAAO,KAGT,IAAIgF,EAAWC,EAAcnB,IAgM/B,SAA2BkB,GACzBA,EAASE,MAAK,CAACC,EAAGC,IAChBD,EAAEE,QAAUD,EAAEC,MACVD,EAAEC,MAAQF,EAAEE,MAyCpB,SAAwBF,EAAaC,GAInC,OAFED,EAAEG,SAAWF,EAAEE,QAAUH,EAAEI,MAAM,GAAI,GAAGC,OAAM,CAAC/B,EAAGgC,IAAMhC,IAAM2B,EAAEK,KAO9DN,EAAEA,EAAEG,OAAS,GAAKF,EAAEA,EAAEE,OAAS,GAG/B,CACN,CArDQI,CACEP,EAAEQ,WAAWzB,KAAK0B,GAASA,EAAKC,gBAChCT,EAAEO,WAAWzB,KAAK0B,GAASA,EAAKC,kBAG1C,CAxMEC,CAAkBd,GAElB,IAAIe,EAAU,KACd,IAAK,IAAIN,EAAI,EAAc,MAAXM,GAAmBN,EAAIT,EAASM,SAAUG,EAAG,CAO3D,IAAIO,EAAUC,EAAWjG,GACzB+F,EAAUG,EAA0ClB,EAASS,GAAIO,EACnE,CAEA,OAAOD,CACT,CAUO,SAASI,EACdC,EACAC,GAEA,IAAIlC,MAAEA,EAAKnE,SAAEA,EAAQsG,OAAEA,GAAWF,EAClC,MAAO,CACL/B,GAAIF,EAAME,GACVrE,WACAsG,SACAC,KAAMF,EAAWlC,EAAME,IACvBmC,OAAQrC,EAAMqC,OAElB,CAmBA,SAASvB,EAGPnB,EACAkB,EACAyB,EACAzC,QAFwC,IAAxCgB,IAAAA,EAA2C,SACF,IAAzCyB,IAAAA,EAA4C,SAClC,IAAVzC,IAAAA,EAAa,IAEb,IAAI0C,EAAeA,CACjBvC,EACA5E,EACAoH,KAEA,IAAIf,EAAmC,CACrCe,kBACmBhC,IAAjBgC,EAA6BxC,EAAMxD,MAAQ,GAAKgG,EAClDC,eAAuC,IAAxBzC,EAAMyC,cACrBf,cAAetG,EACf4E,SAGEyB,EAAKe,aAAaE,WAAW,OAC/BjI,EACEgH,EAAKe,aAAaE,WAAW7C,GAC7B,wBAAwB4B,EAAKe,aAA7B,wBACM3C,EADN,4GAKF4B,EAAKe,aAAef,EAAKe,aAAapB,MAAMvB,EAAWsB,SAGzD,IAAI3E,EAAOmG,EAAU,CAAC9C,EAAY4B,EAAKe,eACnChB,EAAac,EAAYM,OAAOnB,GAKhCzB,EAAMI,UAAYJ,EAAMI,SAASe,OAAS,IAC5C1G,GAGkB,IAAhBuF,EAAM5E,MACN,4FACuCoB,QAGzCsE,EAAcd,EAAMI,SAAUS,EAAUW,EAAYhF,KAKpC,MAAdwD,EAAMxD,MAAiBwD,EAAM5E,QAIjCyF,EAASjC,KAAK,CACZpC,OACA0E,MAAO2B,EAAarG,EAAMwD,EAAM5E,OAChCoG,cACA,EAaJ,OAXA7B,EAAOmD,SAAQ,CAAC9C,EAAO5E,KAAU,IAAA2H,EAE/B,GAAmB,KAAf/C,EAAMxD,aAAeuG,EAAC/C,EAAMxD,OAANuG,EAAYC,SAAS,KAG7C,IAAK,IAAIC,KAAYC,EAAwBlD,EAAMxD,MACjD+F,EAAavC,EAAO5E,EAAO6H,QAH7BV,EAAavC,EAAO5E,EAKtB,IAGKyF,CACT,CAgBA,SAASqC,EAAwB1G,GAC/B,IAAI2G,EAAW3G,EAAK4G,MAAM,KAC1B,GAAwB,IAApBD,EAAShC,OAAc,MAAO,GAElC,IAAKkC,KAAUC,GAAQH,EAGnBI,EAAaF,EAAMG,SAAS,KAE5BC,EAAWJ,EAAMlF,QAAQ,MAAO,IAEpC,GAAoB,IAAhBmF,EAAKnC,OAGP,OAAOoC,EAAa,CAACE,EAAU,IAAM,CAACA,GAGxC,IAAIC,EAAeR,EAAwBI,EAAKnD,KAAK,MAEjDwD,EAAmB,GAqBvB,OAZAA,EAAO/E,QACF8E,EAAa3D,KAAK6D,GACP,KAAZA,EAAiBH,EAAW,CAACA,EAAUG,GAASzD,KAAK,QAKrDoD,GACFI,EAAO/E,QAAQ8E,GAIVC,EAAO5D,KAAKkD,GACjBzG,EAAKkG,WAAW,MAAqB,KAAbO,EAAkB,IAAMA,GAEpD,CAaA,MAAMY,EAAU,YAMVC,EAAWC,GAAoB,MAANA,EAE/B,SAASlB,EAAarG,EAAcpB,GAClC,IAAI+H,EAAW3G,EAAK4G,MAAM,KACtBY,EAAeb,EAAShC,OAS5B,OARIgC,EAASc,KAAKH,KAChBE,IAPiB,GAUf5I,IACF4I,GAdoB,GAiBfb,EACJe,QAAQH,IAAOD,EAAQC,KACvBI,QACC,CAACjD,EAAOkD,IACNlD,GACC2C,EAAQQ,KAAKD,GAvBM,EAyBJ,KAAZA,EAvBc,EACC,KAyBrBJ,EAEN,CAiBA,SAASjC,EAIPuC,EACAzI,GAEA,IAAI2F,WAAEA,GAAe8C,EAEjBC,EAAgB,CAAA,EAChBC,EAAkB,IAClB5C,EAA2D,GAC/D,IAAK,IAAIN,EAAI,EAAGA,EAAIE,EAAWL,SAAUG,EAAG,CAC1C,IAAIG,EAAOD,EAAWF,GAClBmD,EAAMnD,IAAME,EAAWL,OAAS,EAChCuD,EACkB,MAApBF,EACI3I,EACAA,EAASuF,MAAMoD,EAAgBrD,SAAW,IAC5Cc,EAAQ0C,EACV,CAAEnI,KAAMiF,EAAKe,aAAcC,cAAehB,EAAKgB,cAAegC,OAC9DC,GAGF,IAAKzC,EAAO,OAAO,KAEnB2C,OAAOzF,OAAOoF,EAAetC,EAAME,QAEnC,IAAInC,EAAQyB,EAAKzB,MAEjB4B,EAAQhD,KAAK,CAEXuD,OAAQoC,EACR1I,SAAU8G,EAAU,CAAC6B,EAAiBvC,EAAMpG,WAC5CgJ,aAAcC,EACZnC,EAAU,CAAC6B,EAAiBvC,EAAM4C,gBAEpC7E,UAGyB,MAAvBiC,EAAM4C,eACRL,EAAkB7B,EAAU,CAAC6B,EAAiBvC,EAAM4C,eAExD,CAEA,OAAOjD,CACT,CAiHO,SAAS+C,EAIdI,EACAlJ,GAEuB,iBAAZkJ,IACTA,EAAU,CAAEvI,KAAMuI,EAAStC,eAAe,EAAOgC,KAAK,IAGxD,IAAKO,EAASC,GA4ChB,SACEzI,EACAiG,EACAgC,QADa,IAAbhC,IAAAA,GAAgB,QACb,IAAHgC,IAAAA,GAAM,GAEN5J,EACW,MAAT2B,IAAiBA,EAAKgH,SAAS,MAAQhH,EAAKgH,SAAS,MACrD,eAAehH,EAAf,oCACMA,EAAK2B,QAAQ,MAAO,MAD1B,qIAGsC3B,EAAK2B,QAAQ,MAAO,YAG5D,IAAIgE,EAA8B,GAC9B+C,EACF,IACA1I,EACG2B,QAAQ,UAAW,IACnBA,QAAQ,OAAQ,KAChBA,QAAQ,qBAAsB,QAC9BA,QACC,qBACA,CAACgH,EAAWC,EAAmB7B,KAC7BpB,EAAOvD,KAAK,CAAEwG,YAAW7B,WAA0B,MAAdA,IAC9BA,EAAa,eAAiB,gBAIzC/G,EAAKgH,SAAS,MAChBrB,EAAOvD,KAAK,CAAEwG,UAAW,MACzBF,GACW,MAAT1I,GAAyB,OAATA,EACZ,QACA,qBACGiI,EAETS,GAAgB,QACE,KAAT1I,GAAwB,MAATA,IAQxB0I,GAAgB,iBAOlB,MAAO,CAFO,IAAIG,OAAOH,EAAczC,OAAgBjC,EAAY,KAElD2B,EACnB,CAjGkCmD,CAC9BP,EAAQvI,KACRuI,EAAQtC,cACRsC,EAAQN,KAGNxC,EAAQpG,EAASoG,MAAM+C,GAC3B,IAAK/C,EAAO,OAAO,KAEnB,IAAIuC,EAAkBvC,EAAM,GACxB4C,EAAeL,EAAgBrG,QAAQ,UAAW,MAClDoH,EAAgBtD,EAAMb,MAAM,GAuBhC,MAAO,CACLe,OAvBmB8C,EAAed,QAClC,CAACqB,EAAIlJ,EAA6BlB,KAAU,IAArCgK,UAAEA,EAAS7B,WAAEA,GAAYjH,EAG9B,GAAkB,MAAd8I,EAAmB,CACrB,IAAIK,EAAaF,EAAcnK,IAAU,GACzCyJ,EAAeL,EACZpD,MAAM,EAAGoD,EAAgBrD,OAASsE,EAAWtE,QAC7ChD,QAAQ,UAAW,KACxB,CAEA,MAAMzD,EAAQ6K,EAAcnK,GAM5B,OAJEoK,EAAKJ,GADH7B,IAAe7I,OACC8F,GAEC9F,GAAS,IAAIyD,QAAQ,OAAQ,KAE3CqH,CAAI,GAEb,CACF,GAIE3J,SAAU2I,EACVK,eACAE,UAEJ,CA2DA,SAASjD,EAAWpH,GAClB,IACE,OAAOA,EACJ0I,MAAM,KACNrD,KAAK2F,GAAMC,mBAAmBD,GAAGvH,QAAQ,MAAO,SAChDgC,KAAK,IAUV,CATE,MAAOnB,GAQP,OAPAnE,GACE,EACA,iBAAiBH,EAAjB,oHAEesE,EAAK,MAGftE,CACT,CACF,CAKO,SAASkG,EACd/E,EACA8E,GAEA,GAAiB,MAAbA,EAAkB,OAAO9E,EAE7B,IAAKA,EAAS+J,cAAclD,WAAW/B,EAASiF,eAC9C,OAAO,KAKT,IAAIC,EAAalF,EAAS6C,SAAS,KAC/B7C,EAASQ,OAAS,EAClBR,EAASQ,OACT2E,EAAWjK,EAASU,OAAOsJ,GAC/B,OAAIC,GAAyB,MAAbA,EAEP,KAGFjK,EAASuF,MAAMyE,IAAe,GACvC,CAOO,SAASE,EAAYpK,EAAQqK,QAAY,IAAZA,IAAAA,EAAe,KACjD,IACEnK,SAAUoK,EAAUnK,OACpBA,EAAS,GAAEC,KACXA,EAAO,IACS,iBAAPJ,EAAkBK,EAAUL,GAAMA,EAEzCE,EAAWoK,EACXA,EAAWvD,WAAW,KACpBuD,EAWR,SAAyBzD,EAAsBwD,GAC7C,IAAI7C,EAAW6C,EAAa7H,QAAQ,OAAQ,IAAIiF,MAAM,KAYtD,OAXuBZ,EAAaY,MAAM,KAEzBN,SAASsB,IACR,OAAZA,EAEEjB,EAAShC,OAAS,GAAGgC,EAAS+C,MACb,MAAZ9B,GACTjB,EAASvE,KAAKwF,EAChB,IAGKjB,EAAShC,OAAS,EAAIgC,EAAShD,KAAK,KAAO,GACpD,CAxBQgG,CAAgBF,EAAYD,GAC9BA,EAEJ,MAAO,CACLnK,WACAC,OAAQsK,EAAgBtK,GACxBC,KAAMsK,EAActK,GAExB,CAkBA,SAASuK,EACPC,EACAC,EACAC,EACAjK,GAEA,MACE,qBAAqB+J,EAArB,2CACQC,cAAkBE,KAAKC,UAC7BnK,GAFF,yCAIQiK,EAJR,2HAOJ,CAyBO,SAASG,EAEdhF,GACA,OAAOA,EAAQsC,QACb,CAACjC,EAAO7G,IACI,IAAVA,GAAgB6G,EAAMjC,MAAMxD,MAAQyF,EAAMjC,MAAMxD,KAAK2E,OAAS,GAEpE,CAIO,SAAS0F,EAEdjF,EAAckF,GACd,IAAIC,EAAcH,EAA2BhF,GAK7C,OAAIkF,EACKC,EAAYhH,KAAI,CAACkC,EAAOzG,IAC7BA,IAAQoG,EAAQT,OAAS,EAAIc,EAAMpG,SAAWoG,EAAM4C,eAIjDkC,EAAYhH,KAAKkC,GAAUA,EAAM4C,cAC1C,CAKO,SAASmC,EACdC,EACAC,EACAC,EACAC,GAEA,IAAIzL,OAFU,IAAdyL,IAAAA,GAAiB,GAGI,iBAAVH,EACTtL,EAAKK,EAAUiL,IAEftL,EAAEC,EAAQqL,GAAAA,GAEVxM,GACGkB,EAAGE,WAAaF,EAAGE,SAASmH,SAAS,KACtCsD,EAAoB,IAAK,WAAY,SAAU3K,IAEjDlB,GACGkB,EAAGE,WAAaF,EAAGE,SAASmH,SAAS,KACtCsD,EAAoB,IAAK,WAAY,OAAQ3K,IAE/ClB,GACGkB,EAAGG,SAAWH,EAAGG,OAAOkH,SAAS,KAClCsD,EAAoB,IAAK,SAAU,OAAQ3K,KAI/C,IAGI0L,EAHAC,EAAwB,KAAVL,GAAgC,KAAhBtL,EAAGE,SACjCoK,EAAaqB,EAAc,IAAM3L,EAAGE,SAaxC,GAAkB,MAAdoK,EACFoB,EAAOF,MACF,CACL,IAAII,EAAqBL,EAAe/F,OAAS,EAMjD,IAAKiG,GAAkBnB,EAAWvD,WAAW,MAAO,CAClD,IAAI8E,EAAavB,EAAW7C,MAAM,KAElC,KAAyB,OAAlBoE,EAAW,IAChBA,EAAWC,QACXF,GAAsB,EAGxB5L,EAAGE,SAAW2L,EAAWrH,KAAK,IAChC,CAEAkH,EAAOE,GAAsB,EAAIL,EAAeK,GAAsB,GACxE,CAEA,IAAI/K,EAAOuJ,EAAYpK,EAAI0L,GAGvBK,EACFzB,GAA6B,MAAfA,GAAsBA,EAAWzC,SAAS,KAEtDmE,GACDL,GAA8B,MAAfrB,IAAuBkB,EAAiB3D,SAAS,KAQnE,OANGhH,EAAKX,SAAS2H,SAAS,OACvBkE,IAA4BC,IAE7BnL,EAAKX,UAAY,KAGZW,CACT,OAiBamG,EAAaiF,GACxBA,EAAMzH,KAAK,KAAKhC,QAAQ,SAAU,KAKvB2G,EAAqBjJ,GAChCA,EAASsC,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,KAKlCiI,EAAmBtK,GAC7BA,GAAqB,MAAXA,EAEPA,EAAO4G,WAAW,KAClB5G,EACA,IAAMA,EAHN,GAQOuK,EAAiBtK,GAC3BA,GAAiB,MAATA,EAAoBA,EAAK2G,WAAW,KAAO3G,EAAO,IAAMA,EAAzC,GA+BnB,MAAM8L,UAA6BjN,OAEnC,MAAMkN,EAWXC,YAAY3F,EAA+B4F,GAQzC,IAAIC,EARkEC,KAVhEC,eAA8B,IAAI1I,IAAayI,KAI/CE,YACN,IAAI3I,IAAKyI,KAGXG,aAAyB,GAGvB5N,EACE2H,GAAwB,iBAATA,IAAsBkG,MAAMC,QAAQnG,GACnD,sCAMF8F,KAAKM,aAAe,IAAIC,SAAQ,CAACtD,EAAGuD,IAAOT,EAASS,IACpDR,KAAKS,WAAa,IAAIC,gBACtB,IAAIC,EAAUA,IACZZ,EAAO,IAAIJ,EAAqB,0BAClCK,KAAKY,oBAAsB,IACzBZ,KAAKS,WAAWI,OAAOtK,oBAAoB,QAASoK,GACtDX,KAAKS,WAAWI,OAAOvK,iBAAiB,QAASqK,GAEjDX,KAAK9F,KAAOwC,OAAOoE,QAAQ5G,GAAM+B,QAC/B,CAAC8E,EAAGC,KAAA,IAAG3N,EAAKb,GAAMwO,EAAA,OAChBtE,OAAOzF,OAAO8J,EAAK,CACjB1N,CAACA,GAAM2M,KAAKiB,aAAa5N,EAAKb,IAC9B,GACJ,CACF,GAEIwN,KAAKkB,MAEPlB,KAAKY,sBAGPZ,KAAKmB,KAAOrB,CACd,CAEQmB,aACN5N,EACAb,GAEA,KAAMA,aAAiB+N,SACrB,OAAO/N,EAGTwN,KAAKG,aAAazJ,KAAKrD,GACvB2M,KAAKC,eAAemB,IAAI/N,GAIxB,IAAIgO,EAA0Bd,QAAQe,KAAK,CAAC9O,EAAOwN,KAAKM,eAAeiB,MACpErH,GAAS8F,KAAKwB,SAASH,EAAShO,OAAKiF,EAAW4B,KAChDpD,GAAUkJ,KAAKwB,SAASH,EAAShO,EAAKyD,KAQzC,OAHAuK,EAAQI,OAAM,SAEd/E,OAAOgF,eAAeL,EAAS,WAAY,CAAEM,IAAKA,KAAM,IACjDN,CACT,CAEQG,SACNH,EACAhO,EACAyD,EACAoD,GAEA,GACE8F,KAAKS,WAAWI,OAAOe,SACvB9K,aAAiB6I,EAIjB,OAFAK,KAAKY,sBACLlE,OAAOgF,eAAeL,EAAS,SAAU,CAAEM,IAAKA,IAAM7K,IAC/CyJ,QAAQR,OAAOjJ,GAYxB,GATAkJ,KAAKC,eAAe4B,OAAOxO,GAEvB2M,KAAKkB,MAEPlB,KAAKY,2BAKOtI,IAAVxB,QAAgCwB,IAAT4B,EAAoB,CAC7C,IAAI4H,EAAiB,IAAIpP,MACvB,0BAA0BW,EAA1B,yFAKF,OAFAqJ,OAAOgF,eAAeL,EAAS,SAAU,CAAEM,IAAKA,IAAMG,IACtD9B,KAAK+B,MAAK,EAAO1O,GACVkN,QAAQR,OAAO+B,EACxB,CAEA,YAAaxJ,IAAT4B,GACFwC,OAAOgF,eAAeL,EAAS,SAAU,CAAEM,IAAKA,IAAM7K,IACtDkJ,KAAK+B,MAAK,EAAO1O,GACVkN,QAAQR,OAAOjJ,KAGxB4F,OAAOgF,eAAeL,EAAS,QAAS,CAAEM,IAAKA,IAAMzH,IACrD8F,KAAK+B,MAAK,EAAO1O,GACV6G,EACT,CAEQ6H,KAAKH,EAAkBI,GAC7BhC,KAAKE,YAAYtF,SAASqH,GAAeA,EAAWL,EAASI,IAC/D,CAEAE,UAAU7L,GAER,OADA2J,KAAKE,YAAYkB,IAAI/K,GACd,IAAM2J,KAAKE,YAAY2B,OAAOxL,EACvC,CAEA8L,SACEnC,KAAKS,WAAW2B,QAChBpC,KAAKC,eAAerF,SAAQ,CAAC4C,EAAG6E,IAAMrC,KAAKC,eAAe4B,OAAOQ,KACjErC,KAAK+B,MAAK,EACZ,CAEAO,kBAAkBzB,GAChB,IAAIe,GAAU,EACd,IAAK5B,KAAKkB,KAAM,CACd,IAAIP,EAAUA,IAAMX,KAAKmC,SACzBtB,EAAOvK,iBAAiB,QAASqK,GACjCiB,QAAgB,IAAIrB,SAASgC,IAC3BvC,KAAKkC,WAAWN,IACdf,EAAOtK,oBAAoB,QAASoK,IAChCiB,GAAW5B,KAAKkB,OAClBqB,EAAQX,EACV,GACA,GAEN,CACA,OAAOA,CACT,CAEIV,WACF,OAAoC,IAA7BlB,KAAKC,eAAeuC,IAC7B,CAEIC,oBAMF,OALAlQ,EACgB,OAAdyN,KAAK9F,MAAiB8F,KAAKkB,KAC3B,6DAGKxE,OAAOoE,QAAQd,KAAK9F,MAAM+B,QAC/B,CAAC8E,EAAG2B,KAAA,IAAGrP,EAAKb,GAAMkQ,EAAA,OAChBhG,OAAOzF,OAAO8J,EAAK,CACjB1N,CAACA,GAAMsP,EAAqBnQ,IAC5B,GACJ,CACF,EACF,CAEIoQ,kBACF,OAAOxC,MAAMjB,KAAKa,KAAKC,eACzB,EASF,SAAS0C,EAAqBnQ,GAC5B,IAPF,SAA0BA,GACxB,OACEA,aAAiB+N,UAAkD,IAAtC/N,EAAyBqQ,QAE1D,CAGOC,CAAiBtQ,GACpB,OAAOA,EAGT,GAAIA,EAAMuQ,OACR,MAAMvQ,EAAMuQ,OAEd,OAAOvQ,EAAMwQ,KACf,CAOaC,MAeAC,EAA6B,SAACzM,EAAK0K,QAAI,IAAJA,IAAAA,EAAO,KACrD,IAAIrB,EAAeqB,EACS,iBAAjBrB,EACTA,EAAe,CAAEqD,OAAQrD,QACe,IAAxBA,EAAaqD,SAC7BrD,EAAaqD,OAAS,KAGxB,IAAIC,EAAU,IAAIC,QAAQvD,EAAasD,SAGvC,OAFAA,EAAQE,IAAI,WAAY7M,GAEjB,IAAI8M,SAAS,KAAI7P,KACnBoM,EAAY,CACfsD,YAEJ,EA2BO,MAAMI,EAOX3D,YACEsD,EACAM,EACAvJ,EACAwJ,QAAQ,IAARA,IAAAA,GAAW,GAEX1D,KAAKmD,OAASA,EACdnD,KAAKyD,WAAaA,GAAc,GAChCzD,KAAK0D,SAAWA,EACZxJ,aAAgBxH,OAClBsN,KAAK9F,KAAOA,EAAKjG,WACjB+L,KAAKlJ,MAAQoD,GAEb8F,KAAK9F,KAAOA,CAEhB,EAOK,SAASyJ,EAAqB7M,GACnC,OACW,MAATA,GACwB,iBAAjBA,EAAMqM,QACe,iBAArBrM,EAAM2M,YACa,kBAAnB3M,EAAM4M,UACb,SAAU5M,CAEd,CC/7BA,MAAM8M,EAAgD,CACpD,OACA,MACA,QACA,UAEIC,EAAuB,IAAItM,IAC/BqM,GAGIE,EAAuC,CAC3C,SACGF,GAECG,EAAsB,IAAIxM,IAAgBuM,GAE1CE,EAAsB,IAAIzM,IAAI,CAAC,IAAK,IAAK,IAAK,IAAK,MACnD0M,EAAoC,IAAI1M,IAAI,CAAC,IAAK,MAE3C2M,EAA4C,CACvD9Q,MAAO,OACPH,cAAUqF,EACV6L,gBAAY7L,EACZ8L,gBAAY9L,EACZ+L,iBAAa/L,EACbgM,cAAUhM,EACViM,UAAMjM,EACNkM,UAAMlM,GAGKmM,EAAsC,CACjDrR,MAAO,OACP8G,UAAM5B,EACN6L,gBAAY7L,EACZ8L,gBAAY9L,EACZ+L,iBAAa/L,EACbgM,cAAUhM,EACViM,UAAMjM,EACNkM,UAAMlM,GAGKoM,EAAiC,CAC5CtR,MAAO,YACPuR,aAASrM,EACTsM,WAAOtM,EACPrF,cAAUqF,GAGNuM,EAAqB,gCAErBC,EAAyDhN,IAAW,CACxEiN,iBAAkBC,QAAQlN,EAAMiN,oBAG5BE,EAA0B,iCAgpEnBC,EAAyBC,OAAO,YA8oB7C,SAASC,EACPC,EACAC,EACAC,GAEA,GAAIA,EAAOC,0BAAiDlN,IAA1B+M,EAAQxE,OAAO4E,OAC/C,MAAMJ,EAAQxE,OAAO4E,OAIvB,MAAM,IAAI/S,OADG4S,EAAiB,aAAe,SACAD,oBAAAA,EAAQK,OAAUL,IAAAA,EAAQ5O,IACzE,CAYA,SAASkP,GACP1S,EACAyG,EACAjB,EACAmN,EACAnS,EACAmL,EACAiH,EACAC,GAEA,IAAIC,EACAC,EACJ,GAAIH,EAAa,CAGfE,EAAoB,GACpB,IAAK,IAAIhM,KAASL,EAEhB,GADAqM,EAAkBrP,KAAKqD,GACnBA,EAAMjC,MAAME,KAAO6N,EAAa,CAClCG,EAAmBjM,EACnB,KACF,CAEJ,MACEgM,EAAoBrM,EACpBsM,EAAmBtM,EAAQA,EAAQT,OAAS,GAI9C,IAAI3E,EAAOwK,EACTrL,GAAU,IACVkL,EAAoBoH,EAAmBnH,GACvClG,EAAczF,EAASU,SAAU8E,IAAaxF,EAASU,SAC1C,SAAbmS,GAgCF,OA1BU,MAANrS,IACFa,EAAKV,OAASX,EAASW,OACvBU,EAAKT,KAAOZ,EAASY,MAKd,MAANJ,GAAqB,KAAPA,GAAoB,MAAPA,IAC5BuS,IACAA,EAAiBlO,MAAM5E,OACtB+S,GAAmB3R,EAAKV,UAEzBU,EAAKV,OAASU,EAAKV,OACfU,EAAKV,OAAOqC,QAAQ,MAAO,WAC3B,UAOF2P,GAAgC,MAAbnN,IACrBnE,EAAKX,SACe,MAAlBW,EAAKX,SAAmB8E,EAAWgC,EAAU,CAAChC,EAAUnE,EAAKX,YAG1DQ,EAAWG,EACpB,CAIA,SAAS4R,GACPC,EACAC,EACA9R,EACA+R,GAOA,IAAKA,IA3FP,SACEA,GAEA,OACU,MAARA,IACE,aAAcA,GAAyB,MAAjBA,EAAK/B,UAC1B,SAAU+B,QAAsB/N,IAAd+N,EAAKC,KAE9B,CAmFgBC,CAAuBF,GACnC,MAAO,CAAE/R,QAGX,GAAI+R,EAAKlC,aAAeqC,GAAcH,EAAKlC,YACzC,MAAO,CACL7P,OACAwC,MAAO2P,GAAuB,IAAK,CAAEf,OAAQW,EAAKlC,cAItD,IA0EIuC,EACApC,EA3EAqC,EAAsBA,KAAO,CAC/BrS,OACAwC,MAAO2P,GAAuB,IAAK,CAAEG,KAAM,mBAIzCC,EAAgBR,EAAKlC,YAAc,MACnCA,EAAagC,EACZU,EAAcC,cACdD,EAAcnJ,cACf0G,EAAa2C,GAAkBzS,GAEnC,QAAkBgE,IAAd+N,EAAKC,KAAoB,CAC3B,GAAyB,eAArBD,EAAKhC,YAA8B,CAErC,IAAK2C,GAAiB7C,GACpB,OAAOwC,IAGT,IAAInC,EACmB,iBAAd6B,EAAKC,KACRD,EAAKC,KACLD,EAAKC,gBAAgBW,UACrBZ,EAAKC,gBAAgBY,gBAErB9G,MAAMjB,KAAKkH,EAAKC,KAAKxF,WAAW7E,QAC9B,CAAC8E,EAAGoG,KAAA,IAAGnQ,EAAMxE,GAAM2U,EAAA,MAAA,GAAQpG,EAAM/J,EAAI,IAAIxE,EAAK,IAAA,GAC9C,IAEF4U,OAAOf,EAAKC,MAElB,MAAO,CACLhS,OACA+S,WAAY,CACVlD,aACAC,aACAC,YAAagC,EAAKhC,YAClBC,cAAUhM,EACViM,UAAMjM,EACNkM,QAGN,CAAO,GAAyB,qBAArB6B,EAAKhC,YAAoC,CAElD,IAAK2C,GAAiB7C,GACpB,OAAOwC,IAGT,IACE,IAAIpC,EACmB,iBAAd8B,EAAKC,KAAoB9H,KAAK8I,MAAMjB,EAAKC,MAAQD,EAAKC,KAE/D,MAAO,CACLhS,OACA+S,WAAY,CACVlD,aACAC,aACAC,YAAagC,EAAKhC,YAClBC,cAAUhM,EACViM,OACAC,UAAMlM,GAKZ,CAFE,MAAOvF,GACP,OAAO4T,GACT,CACF,CACF,CAUA,GARApU,EACsB,mBAAb0U,SACP,iDAMEZ,EAAK/B,SACPoC,EAAea,GAA8BlB,EAAK/B,UAClDA,EAAW+B,EAAK/B,cACX,GAAI+B,EAAKC,gBAAgBW,SAC9BP,EAAea,GAA8BlB,EAAKC,MAClDhC,EAAW+B,EAAKC,UACX,GAAID,EAAKC,gBAAgBY,gBAC9BR,EAAeL,EAAKC,KACpBhC,EAAWkD,GAA8Bd,QACpC,GAAiB,MAAbL,EAAKC,KACdI,EAAe,IAAIQ,gBACnB5C,EAAW,IAAI2C,cAEf,IACEP,EAAe,IAAIQ,gBAAgBb,EAAKC,MACxChC,EAAWkD,GAA8Bd,EAG3C,CAFE,MAAO3T,GACP,OAAO4T,GACT,CAGF,IAAIU,EAAyB,CAC3BlD,aACAC,aACAC,YACGgC,GAAQA,EAAKhC,aAAgB,oCAChCC,WACAC,UAAMjM,EACNkM,UAAMlM,GAGR,GAAI0O,GAAiBK,EAAWlD,YAC9B,MAAO,CAAE7P,OAAM+S,cAIjB,IAAI9S,EAAaT,EAAUQ,GAS3B,OALI8R,GAAa7R,EAAWX,QAAUqS,GAAmB1R,EAAWX,SAClE8S,EAAae,OAAO,QAAS,IAE/BlT,EAAWX,OAAM,IAAO8S,EAEjB,CAAEpS,KAAMH,EAAWI,GAAa8S,aACzC,CAIA,SAASK,GACPhO,EACAiO,GAEA,IAAIC,EAAkBlO,EACtB,GAAIiO,EAAY,CACd,IAAIzU,EAAQwG,EAAQmO,WAAWC,GAAMA,EAAEhQ,MAAME,KAAO2P,IAChDzU,GAAS,IACX0U,EAAkBlO,EAAQR,MAAM,EAAGhG,GAEvC,CACA,OAAO0U,CACT,CAEA,SAASG,GACP1S,EACAjC,EACAsG,EACA2N,EACApU,EACA+U,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/P,EACAgQ,GAEA,IAAIC,EAAeD,EACfE,GAAcF,EAAoB,IAChCA,EAAoB,GAAG3R,MACvB2R,EAAoB,GAAGvO,UACzB5B,EACAsQ,EAAavT,EAAQQ,UAAUzC,EAAMH,UACrC4V,EAAUxT,EAAQQ,UAAU5C,GAG5B0U,EACFc,GAAuBE,GAAcF,EAAoB,IACrDA,EAAoB,QACpBnQ,EACFsP,EAAkBD,EAClBD,GAA8BhO,EAASiO,GACvCjO,EAKAoP,EAAeL,EACfA,EAAoB,GAAGM,gBACvBzQ,EACA0Q,EACFf,GAA+Ba,GAAgBA,GAAgB,IAE7DG,EAAoBrB,EAAgB5L,QAAO,CAACjC,EAAO7G,KACrD,IAAI4E,MAAEA,GAAUiC,EAChB,GAAIjC,EAAMoR,KAER,OAAO,EAGT,GAAoB,MAAhBpR,EAAMqR,OACR,OAAO,EAGT,GAAInB,EACF,QAA4B,mBAAjBlQ,EAAMqR,SAAyBrR,EAAMqR,OAAOC,eAItB9Q,IAA/BlF,EAAM4G,WAAWlC,EAAME,OAErB5E,EAAMiW,aAAqC/Q,IAA3BlF,EAAMiW,OAAOvR,EAAME,KAKzC,GA0HJ,SACEsR,EACAC,EACAxP,GAEA,IAAIyP,GAEDD,GAEDxP,EAAMjC,MAAME,KAAOuR,EAAazR,MAAME,GAIpCyR,OAAsDnR,IAAtCgR,EAAkBvP,EAAMjC,MAAME,IAGlD,OAAOwR,GAASC,CAClB,CA1IMC,CAAYtW,EAAM4G,WAAY5G,EAAMsG,QAAQxG,GAAQ6G,IACpDoO,EAAwBpM,MAAM/D,GAAOA,IAAO+B,EAAMjC,MAAME,KAExD,OAAO,EAOT,IAAI2R,EAAoBvW,EAAMsG,QAAQxG,GAClC0W,EAAiB7P,EAErB,OAAO8P,GAAuB9P,EAAKrG,EAAA,CACjCkV,aACAkB,cAAeH,EAAkB1P,OACjC4O,UACAkB,WAAYH,EAAe3P,QACxBoN,EAAU,CACbqB,eACAsB,sBAAuBlB,EACvBmB,yBAAyBjB,IAGrBd,GACAU,EAAWjV,SAAWiV,EAAWhV,SAC/BiV,EAAQlV,SAAWkV,EAAQjV,QAE7BgV,EAAWhV,SAAWiV,EAAQjV,QAC9BsW,GAAmBP,EAAmBC,MAC1C,IAIAO,EAA8C,GAoFlD,OAnFA7B,EAAiB1N,SAAQ,CAACwP,EAAG/W,KAM3B,GACE2U,IACCtO,EAAQqC,MAAM+L,GAAMA,EAAEhQ,MAAME,KAAOoS,EAAEC,WACtChC,EAAgBiC,IAAIjX,GAEpB,OAGF,IAAIkX,EAAiBhS,EAAYiQ,EAAa4B,EAAE9V,KAAMmE,GAMtD,IAAK8R,EASH,YARAJ,EAAqBzT,KAAK,CACxBrD,MACAgX,QAASD,EAAEC,QACX/V,KAAM8V,EAAE9V,KACRoF,QAAS,KACTK,MAAO,KACP0G,WAAY,OAQhB,IAAI+J,EAAUpX,EAAMqX,SAAS9I,IAAItO,GAC7BqX,EAAeC,GAAeJ,EAAgBH,EAAE9V,MAEhDsW,GAAmB,EAGrBA,GAFErC,EAAiB+B,IAAIjX,OAGd+U,EAAsBtN,SAASzH,KAIxCmX,GACkB,SAAlBA,EAAQpX,YACSkF,IAAjBkS,EAAQtQ,KAKWgO,EAIA2B,GAAuBa,EAAYhX,EAAA,CACpDkV,aACAkB,cAAe1W,EAAMsG,QAAQtG,EAAMsG,QAAQT,OAAS,GAAGgB,OACvD4O,UACAkB,WAAYrQ,EAAQA,EAAQT,OAAS,GAAGgB,QACrCoN,EAAU,CACbqB,eACAsB,sBAAuBlB,EACvBmB,yBAAyBjB,GAErBd,OAIJ0C,GACFT,EAAqBzT,KAAK,CACxBrD,MACAgX,QAASD,EAAEC,QACX/V,KAAM8V,EAAE9V,KACRoF,QAAS6Q,EACTxQ,MAAO2Q,EACPjK,WAAY,IAAIC,iBAEpB,IAGK,CAACuI,EAAmBkB,EAC7B,CAqBA,SAASD,GACPX,EACAxP,GAEA,IAAI8Q,EAActB,EAAazR,MAAMxD,KACrC,OAEEiV,EAAa5V,WAAaoG,EAAMpG,UAGhB,MAAfkX,GACCA,EAAYvP,SAAS,MACrBiO,EAAatP,OAAO,OAASF,EAAME,OAAO,IAEhD,CAEA,SAAS4P,GACPiB,EACAC,GAEA,GAAID,EAAYhT,MAAM8S,iBAAkB,CACtC,IAAII,EAAcF,EAAYhT,MAAM8S,iBAAiBG,GACrD,GAA2B,kBAAhBC,EACT,OAAOA,CAEX,CAEA,OAAOD,EAAId,uBACb,CAOA3H,eAAe2I,GACbnT,EACAJ,EACAE,GAEA,IAAKE,EAAMoR,KACT,OAGF,IAAIgC,QAAkBpT,EAAMoR,OAK5B,IAAKpR,EAAMoR,KACT,OAGF,IAAIiC,EAAgBvT,EAASE,EAAME,IACnCzF,EAAU4Y,EAAe,8BAUzB,IAAIC,EAAoC,CAAA,EACxC,IAAK,IAAIC,KAAqBH,EAAW,CACvC,IAGII,OACmBhT,IAHrB6S,EAAcE,IAMQ,qBAAtBA,EAEF1Y,GACG2Y,EACD,UAAUH,EAAcnT,GAAE,4BAA4BqT,EAAtD,yGAE8BA,wBAI7BC,GACAhU,EAAmBgT,IAAIe,KAExBD,EAAaC,GACXH,EAAUG,GAEhB,CAIA3O,OAAOzF,OAAOkU,EAAeC,GAK7B1O,OAAOzF,OAAOkU,EAAazX,EAKtBgE,CAAAA,EAAAA,EAAmByT,GAAc,CACpCjC,UAAM5Q,IAEV,CAGA,SAASiT,GACPlF,GAEA,OAAO9F,QAAQiL,IAAInF,EAAK3M,QAAQ7B,KAAKiQ,GAAMA,EAAEvF,YAC/C,CAEAD,eAAemJ,GACbC,EACA9E,EACAvB,EACAsG,EACAjS,EACA9B,EACAF,EACAkU,GAEA,IAAIC,EAAiBF,EAAc1P,QACjC,CAAC8E,EAAK+G,IAAM/G,EAAIK,IAAI0G,EAAEhQ,MAAME,KAC5B,IAAIT,KAEFuU,EAAgB,IAAIvU,IAKpBwU,QAAgBL,EAAiB,CACnChS,QAASA,EAAQ7B,KAAKkC,IACpB,IAAIiS,EAAaH,EAAevB,IAAIvQ,EAAMjC,MAAME,IAoBhD,OAAAtE,KACKqG,EAAK,CACRiS,aACAzJ,QAlB2C0J,IAC3CH,EAAc1K,IAAIrH,EAAMjC,MAAME,IACvBgU,EAwCf1J,eACEsE,EACAvB,EACAtL,EACAnC,EACAF,EACAuU,EACAC,GAEA,IAAIzQ,EACA0Q,EAEAC,EACFC,IAGA,IAAItM,EAGAO,EAAe,IAAIC,SAAuB,CAACtD,EAAGuD,IAAOT,EAASS,IAClE2L,EAAWA,IAAMpM,IACjBsF,EAAQxE,OAAOvK,iBAAiB,QAAS6V,GAEzC,IAmBIG,EAnBAC,EAAiBC,GACI,mBAAZH,EACF9L,QAAQR,OACb,IAAIrN,MACF,oEACMkU,EAAI,eAAe7M,EAAMjC,MAAME,GAAE,MAItCqU,EACL,CACEhH,UACApL,OAAQF,EAAME,OACdwS,QAASP,WAEC5T,IAARkU,EAAoB,CAACA,GAAO,IAkBpC,OAZEF,EADEL,EACeA,GAAiBO,GAAiBD,EAAcC,KAEhD,WACf,IAEE,MAAO,CAAE5F,KAAM,OAAQnL,aADP8Q,IAIlB,CAFE,MAAOxZ,GACP,MAAO,CAAE6T,KAAM,QAASnL,OAAQ1I,EAClC,CACD,EAPgB,GAUZwN,QAAQe,KAAK,CAACgL,EAAgBhM,GAAc,EAGrD,IACE,IAAI+L,EAAUtS,EAAMjC,MAAM8O,GAE1B,GAAI7M,EAAMjC,MAAMoR,KACd,GAAImD,EAAS,CAEX,IAAIK,GACCla,SAAe+N,QAAQiL,IAAI,CAI9BY,EAAWC,GAAS5K,OAAO1O,IACzB2Z,EAAe3Z,CAAC,IAElBkY,GAAoBlR,EAAMjC,MAAOJ,EAAoBE,KAEvD,QAAqBU,IAAjBoU,EACF,MAAMA,EAERjR,EAASjJ,CACX,KAAO,CAKL,SAHMyY,GAAoBlR,EAAMjC,MAAOJ,EAAoBE,GAE3DyU,EAAUtS,EAAMjC,MAAM8O,IAClByF,EAKG,IAAa,WAATzF,EAAmB,CAC5B,IAAInQ,EAAM,IAAIP,IAAImP,EAAQ5O,KACtB9C,EAAW8C,EAAI9C,SAAW8C,EAAI7C,OAClC,MAAM6S,GAAuB,IAAK,CAChCf,OAAQL,EAAQK,OAChB/R,WACA0W,QAAStQ,EAAMjC,MAAME,IAEzB,CAGE,MAAO,CAAE4O,KAAMvP,EAAW6C,KAAMuB,YAAQnD,EAC1C,CAbEmD,QAAe2Q,EAAWC,EAc9B,KACK,KAAKA,EAAS,CACnB,IAAI5V,EAAM,IAAIP,IAAImP,EAAQ5O,KAE1B,MAAMgQ,GAAuB,IAAK,CAChC9S,SAFa8C,EAAI9C,SAAW8C,EAAI7C,QAIpC,CACE6H,QAAe2Q,EAAWC,EAC5B,CAEA9Z,OACoB+F,IAAlBmD,EAAOA,OACP,gBAAwB,WAATmL,EAAoB,YAAc,YAAjD,eACM7M,EAAMjC,MAAME,GAA8C4O,4CAAAA,EADhE,+CAaJ,CATE,MAAO7T,GAIP,MAAO,CAAE6T,KAAMvP,EAAWP,MAAO2E,OAAQ1I,EAC3C,CAAU,QACJoZ,GACF9G,EAAQxE,OAAOtK,oBAAoB,QAAS4V,EAEhD,CAEA,OAAO1Q,CACT,CA1KYkR,CACE/F,EACAvB,EACAtL,EACAnC,EACAF,EACAuU,EACAL,GAEFrL,QAAQgC,QAAQ,CAAEqE,KAAMvP,EAAW6C,KAAMuB,YAAQnD,MAM9C,IAGX+M,UACApL,OAAQP,EAAQ,GAAGO,OACnBwS,QAASb,IAeX,OAVAlS,EAAQkB,SAASkN,GACfvV,EACEuZ,EAAcxB,IAAIxC,EAAEhQ,MAAME,IAC1B,kDAAoD8P,EAAEhQ,MAAME,GAA5D,0HAOG+T,EAAQ/P,QAAO,CAACiB,EAAG7D,IAAMyS,EAAevB,IAAI5Q,EAAQN,GAAGtB,MAAME,KACtE,CAwIAsK,eAAesK,GACbC,GAEA,IAAIpR,OAAEA,EAAMmL,KAAEA,EAAIzD,OAAEA,GAAW0J,EAE/B,GAAIC,GAAWrR,GAAS,CACtB,IAAIvB,EAEJ,IACE,IAAI6S,EAActR,EAAO2H,QAAQzB,IAAI,gBAKjCzH,EAFA6S,GAAe,wBAAwB5Q,KAAK4Q,GAC3B,MAAftR,EAAO6K,KACF,WAEM7K,EAAO8I,aAGT9I,EAAO+I,MAIxB,CAFE,MAAOzR,GACP,MAAO,CAAE6T,KAAMvP,EAAWP,MAAOA,MAAO/D,EAC1C,CAEA,OAAI6T,IAASvP,EAAWP,MACf,CACL8P,KAAMvP,EAAWP,MACjBA,MAAO,IAAI0M,EAAkB/H,EAAO0H,OAAQ1H,EAAOgI,WAAYvJ,GAC/D6O,WAAYtN,EAAO0H,OACnBC,QAAS3H,EAAO2H,SAIb,CACLwD,KAAMvP,EAAW6C,KACjBA,OACA6O,WAAYtN,EAAO0H,OACnBC,QAAS3H,EAAO2H,QAEpB,CAEA,OAAIwD,IAASvP,EAAWP,MACf,CACL8P,KAAMvP,EAAWP,MACjBA,MAAO2E,EACPsN,WAAYpF,EAAqBlI,GAAUA,EAAO0H,OAASA,GAI3D6J,GAAevR,GACV,CACLmL,KAAMvP,EAAW4V,SACjBC,aAAczR,EACdsN,WAAuB,OAAboE,EAAE1R,EAAO0F,WAAI,EAAXgM,EAAahK,OACzBC,SAASgK,OAAAA,EAAA3R,EAAO0F,WAAPiM,EAAAA,EAAahK,UAAW,IAAIC,QAAQ5H,EAAO0F,KAAKiC,UAItD,CAAEwD,KAAMvP,EAAW6C,KAAMA,KAAMuB,EAAQsN,WAAY5F,GAT9B,IAAAgK,EAAAC,CAU9B,CAGA,SAASC,GACPC,EACAjI,EACAgF,EACA3Q,EACAjB,EACAmG,GAEA,IAAI3L,EAAWqa,EAASlK,QAAQzB,IAAI,YAMpC,GALApP,EACEU,EACA,+EAGG4R,EAAmB1I,KAAKlJ,GAAW,CACtC,IAAIsa,EAAiB7T,EAAQR,MAC3B,EACAQ,EAAQmO,WAAWC,GAAMA,EAAEhQ,MAAME,KAAOqS,IAAW,GAErDpX,EAAW0S,GACT,IAAIzP,IAAImP,EAAQ5O,KAChB8W,EACA9U,GACA,EACAxF,EACA2L,GAEF0O,EAASlK,QAAQE,IAAI,WAAYrQ,EACnC,CAEA,OAAOqa,CACT,CAEA,SAASE,GACPva,EACA2V,EACAnQ,GAEA,GAAIoM,EAAmB1I,KAAKlJ,GAAW,CAErC,IAAIwa,EAAqBxa,EACrBwD,EAAMgX,EAAmBjT,WAAW,MACpC,IAAItE,IAAI0S,EAAW8E,SAAWD,GAC9B,IAAIvX,IAAIuX,GACRE,EAA0D,MAAzCjV,EAAcjC,EAAI9C,SAAU8E,GACjD,GAAIhC,EAAIV,SAAW6S,EAAW7S,QAAU4X,EACtC,OAAOlX,EAAI9C,SAAW8C,EAAI7C,OAAS6C,EAAI5C,IAE3C,CACA,OAAOZ,CACT,CAKA,SAAS2a,GACPvY,EACApC,EACA4N,EACAwG,GAEA,IAAI5Q,EAAMpB,EAAQQ,UAAUkR,GAAkB9T,IAAWgB,WACrDkN,EAAoB,CAAEN,UAE1B,GAAIwG,GAAcL,GAAiBK,EAAWlD,YAAa,CACzD,IAAIA,WAAEA,EAAUE,YAAEA,GAAgBgD,EAIlClG,EAAKuE,OAASvB,EAAW2C,cAEL,qBAAhBzC,GACFlD,EAAKiC,QAAU,IAAIC,QAAQ,CAAE,eAAgBgB,IAC7ClD,EAAKmF,KAAO9H,KAAKC,UAAU4I,EAAW9C,OACb,eAAhBF,EAETlD,EAAKmF,KAAOe,EAAW7C,KAEP,sCAAhBH,GACAgD,EAAW/C,SAGXnD,EAAKmF,KAAOiB,GAA8BF,EAAW/C,UAGrDnD,EAAKmF,KAAOe,EAAW/C,QAE3B,CAEA,OAAO,IAAIuJ,QAAQpX,EAAK0K,EAC1B,CAEA,SAASoG,GAA8BjD,GACrC,IAAIoC,EAAe,IAAIQ,gBAEvB,IAAK,IAAK7T,EAAKb,KAAU8R,EAASxD,UAEhC4F,EAAae,OAAOpU,EAAsB,iBAAVb,EAAqBA,EAAQA,EAAMwE,MAGrE,OAAO0P,CACT,CAEA,SAASc,GACPd,GAEA,IAAIpC,EAAW,IAAI2C,SACnB,IAAK,IAAK5T,EAAKb,KAAUkU,EAAa5F,UACpCwD,EAASmD,OAAOpU,EAAKb,GAEvB,OAAO8R,CACT,CAEA,SAASwJ,GACPpU,EACAiS,EACAI,EACAtD,EACAsF,EACAC,GAQA,IAEIjF,EAFA/O,EAAwC,CAAA,EACxCqP,EAAuC,KAEvC4E,GAAa,EACbC,EAAyC,CAAA,EACzCC,EACF1F,GAAuBE,GAAcF,EAAoB,IACrDA,EAAoB,GAAG3R,WACvBwB,EAqFN,OAlFAyT,EAAQnR,SAAQ,CAACa,EAAQvI,KACvB,IAAI8E,EAAK2T,EAAczY,GAAO4E,MAAME,GAKpC,GAJAzF,GACG6b,GAAiB3S,GAClB,uDAEEkN,GAAclN,GAAS,CACzB,IAAI3E,EAAQ2E,EAAO3E,MAWnB,QAPqBwB,IAAjB6V,IACFrX,EAAQqX,EACRA,OAAe7V,GAGjB+Q,EAASA,GAAU,GAEf2E,EACF3E,EAAOrR,GAAMlB,MACR,CAIL,IAAIuX,EAAgBC,GAAoB5U,EAAS1B,GACX,MAAlCqR,EAAOgF,EAAcvW,MAAME,MAC7BqR,EAAOgF,EAAcvW,MAAME,IAAMlB,EAErC,CAGAkD,EAAWhC,QAAMM,EAIZ2V,IACHA,GAAa,EACblF,EAAapF,EAAqBlI,EAAO3E,OACrC2E,EAAO3E,MAAMqM,OACb,KAEF1H,EAAO2H,UACT8K,EAAclW,GAAMyD,EAAO2H,QAE/B,MACMmL,GAAiB9S,IACnBsS,EAAgBzK,IAAItL,EAAIyD,EAAOyR,cAC/BlT,EAAWhC,GAAMyD,EAAOyR,aAAahT,KAId,MAArBuB,EAAOsN,YACe,MAAtBtN,EAAOsN,YACNkF,IAEDlF,EAAatN,EAAOsN,YAElBtN,EAAO2H,UACT8K,EAAclW,GAAMyD,EAAO2H,WAG7BpJ,EAAWhC,GAAMyD,EAAOvB,KAGpBuB,EAAOsN,YAAoC,MAAtBtN,EAAOsN,aAAuBkF,IACrDlF,EAAatN,EAAOsN,YAElBtN,EAAO2H,UACT8K,EAAclW,GAAMyD,EAAO2H,SAGjC,SAMmB9K,IAAjB6V,GAA8B1F,IAChCY,EAAS,CAAE,CAACZ,EAAoB,IAAK0F,GACrCnU,EAAWyO,EAAoB,SAAMnQ,GAGhC,CACL0B,aACAqP,SACAN,WAAYA,GAAc,IAC1BmF,gBAEJ,CAEA,SAASM,GACPpb,EACAsG,EACAiS,EACAI,EACAtD,EACA0B,EACAsE,EACAV,GAKA,IAAI/T,WAAEA,EAAUqP,OAAEA,GAAWyE,GAC3BpU,EACAiS,EACAI,EACAtD,EACAsF,GACA,GAIF,IAAK,IAAI7a,EAAQ,EAAGA,EAAQiX,EAAqBlR,OAAQ/F,IAAS,CAChE,IAAIG,IAAEA,EAAG0G,MAAEA,EAAK0G,WAAEA,GAAe0J,EAAqBjX,GACtDX,OACqB+F,IAAnBmW,QAA0DnW,IAA1BmW,EAAevb,GAC/C,6CAEF,IAAIuI,EAASgT,EAAevb,GAG5B,IAAIuN,IAAcA,EAAWI,OAAOe,QAG7B,GAAI+G,GAAclN,GAAS,CAChC,IAAI4S,EAAgBC,GAAoBlb,EAAMsG,cAASK,SAAAA,EAAOjC,MAAME,IAC9DqR,GAAUA,EAAOgF,EAAcvW,MAAME,MACzCqR,EAAM3V,EAAA,CAAA,EACD2V,EAAM,CACT,CAACgF,EAAcvW,MAAME,IAAKyD,EAAO3E,SAGrC1D,EAAMqX,SAAS5I,OAAOxO,EACxB,MAAO,GAAI+a,GAAiB3S,GAG1BlJ,GAAU,EAAO,gDACZ,GAAIgc,GAAiB9S,GAG1BlJ,GAAU,EAAO,uCACZ,CACL,IAAImc,EAAcC,GAAelT,EAAOvB,MACxC9G,EAAMqX,SAASnH,IAAIjQ,EAAKqb,EAC1B,CACF,CAEA,MAAO,CAAE1U,aAAYqP,SACvB,CAEA,SAASuF,GACP5U,EACA6U,EACAnV,EACA2P,GAEA,IAAIyF,EAAgBpb,EAAA,CAAA,EAAQmb,GAC5B,IAAK,IAAI9U,KAASL,EAAS,CACzB,IAAI1B,EAAK+B,EAAMjC,MAAME,GAerB,GAdI6W,EAAcE,eAAe/W,QACLM,IAAtBuW,EAAc7W,KAChB8W,EAAiB9W,GAAM6W,EAAc7W,SAMXM,IAAnB0B,EAAWhC,IAAqB+B,EAAMjC,MAAMqR,SAGrD2F,EAAiB9W,GAAMgC,EAAWhC,IAGhCqR,GAAUA,EAAO0F,eAAe/W,GAElC,KAEJ,CACA,OAAO8W,CACT,CAEA,SAASE,GACPvG,GAEA,OAAKA,EAGEE,GAAcF,EAAoB,IACrC,CAEEwG,WAAY,CAAC,GAEf,CACEA,WAAY,CACV,CAACxG,EAAoB,IAAKA,EAAoB,GAAGvO,OAThD,EAYX,CAKA,SAASoU,GACP5U,EACA2Q,GAKA,OAHsBA,EAClB3Q,EAAQR,MAAM,EAAGQ,EAAQmO,WAAWC,GAAMA,EAAEhQ,MAAME,KAAOqS,IAAW,GACpE,IAAI3Q,IAEUwV,UAAUC,MAAMrH,IAAmC,IAA7BA,EAAEhQ,MAAMiN,oBAC9CrL,EAAQ,EAEZ,CAEA,SAAS0V,GAAuB3X,GAK9B,IAAIK,EACgB,IAAlBL,EAAOwB,OACHxB,EAAO,GACPA,EAAO0X,MAAM3O,GAAMA,EAAEtN,QAAUsN,EAAElM,MAAmB,MAAXkM,EAAElM,QAAiB,CAC1D0D,GAAE,wBAGV,MAAO,CACL0B,QAAS,CACP,CACEO,OAAQ,CAAE,EACVtG,SAAU,GACVgJ,aAAc,GACd7E,UAGJA,QAEJ,CAEA,SAAS2O,GACPtD,EAAckM,GAYd,IAXA1b,SACEA,EAAQ0W,QACRA,EAAO3E,OACPA,EAAMkB,KACNA,QAMD,IAAAyI,EAAG,CAAA,EAAEA,EAEF5L,EAAa,uBACb6L,EAAe,kCAgCnB,OA9Be,MAAXnM,GACFM,EAAa,cACTiC,GAAU/R,GAAY0W,EACxBiF,EACE,cAAc5J,EAAM,gBAAgB/R,EAApC,+CAC2C0W,EAD3C,+CAGgB,iBAATzD,EACT0I,EAAe,sCACG,iBAAT1I,IACT0I,EAAe,qCAEG,MAAXnM,GACTM,EAAa,YACb6L,EAAyBjF,UAAAA,EAAgC1W,yBAAAA,EAAW,KAChD,MAAXwP,GACTM,EAAa,YACb6L,EAAY,yBAA4B3b,EAAW,KAC/B,MAAXwP,IACTM,EAAa,qBACTiC,GAAU/R,GAAY0W,EACxBiF,EACE,cAAc5J,EAAOoB,cAAa,gBAAgBnT,EAAlD,gDAC4C0W,EAD5C,+CAGO3E,IACT4J,6BAA0C5J,EAAOoB,cAAgB,MAI9D,IAAItD,EACTL,GAAU,IACVM,EACA,IAAI/Q,MAAM4c,IACV,EAEJ,CAGA,SAASC,GACPxD,GAEA,IAAK,IAAI3S,EAAI2S,EAAQ9S,OAAS,EAAGG,GAAK,EAAGA,IAAK,CAC5C,IAAIqC,EAASsQ,EAAQ3S,GACrB,GAAIgV,GAAiB3S,GACnB,MAAO,CAAEA,SAAQnI,IAAK8F,EAE1B,CACF,CAEA,SAAS2N,GAAkBzS,GAEzB,OAAOH,EAAUT,EAAA,CAAA,EADgB,iBAATY,EAAoBR,EAAUQ,GAAQA,EAC7B,CAAET,KAAM,KAC3C,CAiCA,SAAS2b,GAAwB/T,GAC/B,OACEqR,GAAWrR,EAAOA,SAAWuI,EAAoBsG,IAAI7O,EAAOA,OAAO0H,OAEvE,CAEA,SAASoL,GAAiB9S,GACxB,OAAOA,EAAOmL,OAASvP,EAAW4V,QACpC,CAEA,SAAStE,GAAclN,GACrB,OAAOA,EAAOmL,OAASvP,EAAWP,KACpC,CAEA,SAASsX,GAAiB3S,GACxB,OAAQA,GAAUA,EAAOmL,QAAUvP,EAAW6L,QAChD,CAEO,SAAS8J,GAAexa,GAC7B,IAAIya,EAAyBza,EAC7B,OACEya,GACoB,iBAAbA,GACkB,iBAAlBA,EAAS/S,MACc,mBAAvB+S,EAAS/K,WACW,mBAApB+K,EAAS9K,QACgB,mBAAzB8K,EAASwC,WAEpB,CAEA,SAAS3C,GAAWta,GAClB,OACW,MAATA,GACwB,iBAAjBA,EAAM2Q,QACe,iBAArB3Q,EAAMiR,YACY,iBAAlBjR,EAAM4Q,cACS,IAAf5Q,EAAM8T,IAEjB,CAYA,SAASE,GAAcd,GACrB,OAAO3B,EAAoBuG,IAAI5E,EAAOhI,cACxC,CAEA,SAASsJ,GACPtB,GAEA,OAAO7B,EAAqByG,IAAI5E,EAAOhI,cACzC,CAEA4E,eAAeoN,GACbC,EACAhE,EACAI,EACA6D,EACAxJ,EACAkD,GAEA,IAAK,IAAIpW,EAAQ,EAAGA,EAAQ6Y,EAAQ9S,OAAQ/F,IAAS,CACnD,IAAIuI,EAASsQ,EAAQ7Y,GACjB6G,EAAQ4R,EAAczY,GAI1B,IAAK6G,EACH,SAGF,IAAIwP,EAAeoG,EAAeR,MAC/BrH,GAAMA,EAAEhQ,MAAME,KAAO+B,EAAOjC,MAAME,KAEjC6X,EACc,MAAhBtG,IACCW,GAAmBX,EAAcxP,SAC2BzB,KAA5DgR,GAAqBA,EAAkBvP,EAAMjC,MAAME,KAEtD,GAAIuW,GAAiB9S,KAAY2K,GAAayJ,GAAuB,CAInE,IAAIhP,EAAS+O,EAAQ1c,GACrBX,EACEsO,EACA,0EAEIiP,GAAoBrU,EAAQoF,EAAQuF,GAAW7E,MAAM9F,IACrDA,IACFsQ,EAAQ7Y,GAASuI,GAAUsQ,EAAQ7Y,GACrC,GAEJ,CACF,CACF,CAEAoP,eAAewN,GACbrU,EACAoF,EACAkP,GAGA,QAHM,IAANA,IAAAA,GAAS,UAEWtU,EAAOyR,aAAauC,YAAY5O,GACpD,CAIA,GAAIkP,EACF,IACE,MAAO,CACLnJ,KAAMvP,EAAW6C,KACjBA,KAAMuB,EAAOyR,aAAazK,cAQ9B,CANE,MAAO1P,GAEP,MAAO,CACL6T,KAAMvP,EAAWP,MACjBA,MAAO/D,EAEX,CAGF,MAAO,CACL6T,KAAMvP,EAAW6C,KACjBA,KAAMuB,EAAOyR,aAAahT,KAnB5B,CAqBF,CAEA,SAAS+L,GAAmBrS,GAC1B,OAAO,IAAIsT,gBAAgBtT,GAAQoc,OAAO,SAASjU,MAAMyB,GAAY,KAANA,GACjE,CAEA,SAASmN,GACPjR,EACAzG,GAEA,IAAIW,EACkB,iBAAbX,EAAwBa,EAAUb,GAAUW,OAASX,EAASW,OACvE,GACE8F,EAAQA,EAAQT,OAAS,GAAGnB,MAAM5E,OAClC+S,GAAmBrS,GAAU,IAG7B,OAAO8F,EAAQA,EAAQT,OAAS,GAIlC,IAAI4F,EAAcH,EAA2BhF,GAC7C,OAAOmF,EAAYA,EAAY5F,OAAS,EAC1C,CAEA,SAASgX,GACPC,GAEA,IAAI/L,WAAEA,EAAUC,WAAEA,EAAUC,YAAEA,EAAWG,KAAEA,EAAIF,SAAEA,EAAQC,KAAEA,GACzD2L,EACF,GAAK/L,GAAeC,GAAeC,EAInC,OAAY,MAARG,EACK,CACLL,aACAC,aACAC,cACAC,cAAUhM,EACViM,UAAMjM,EACNkM,QAEmB,MAAZF,EACF,CACLH,aACAC,aACAC,cACAC,WACAC,UAAMjM,EACNkM,UAAMlM,QAEUA,IAATiM,EACF,CACLJ,aACAC,aACAC,cACAC,cAAUhM,EACViM,OACAC,UAAMlM,QAPH,CAUT,CAEA,SAAS6X,GACPld,EACAoU,GAEA,GAAIA,EAAY,CAWd,MAV8C,CAC5CjU,MAAO,UACPH,WACAkR,WAAYkD,EAAWlD,WACvBC,WAAYiD,EAAWjD,WACvBC,YAAagD,EAAWhD,YACxBC,SAAU+C,EAAW/C,SACrBC,KAAM8C,EAAW9C,KACjBC,KAAM6C,EAAW7C,KAGrB,CAWE,MAV8C,CAC5CpR,MAAO,UACPH,WACAkR,gBAAY7L,EACZ8L,gBAAY9L,EACZ+L,iBAAa/L,EACbgM,cAAUhM,EACViM,UAAMjM,EACNkM,UAAMlM,EAIZ,CAEA,SAAS8X,GACPnd,EACAoU,GAYA,MAViD,CAC/CjU,MAAO,aACPH,WACAkR,WAAYkD,EAAWlD,WACvBC,WAAYiD,EAAWjD,WACvBC,YAAagD,EAAWhD,YACxBC,SAAU+C,EAAW/C,SACrBC,KAAM8C,EAAW9C,KACjBC,KAAM6C,EAAW7C,KAGrB,CAEA,SAAS6L,GACPhJ,EACAnN,GAEA,GAAImN,EAAY,CAWd,MAVwC,CACtCjU,MAAO,UACP+Q,WAAYkD,EAAWlD,WACvBC,WAAYiD,EAAWjD,WACvBC,YAAagD,EAAWhD,YACxBC,SAAU+C,EAAW/C,SACrBC,KAAM8C,EAAW9C,KACjBC,KAAM6C,EAAW7C,KACjBtK,OAGJ,CAWE,MAVwC,CACtC9G,MAAO,UACP+Q,gBAAY7L,EACZ8L,gBAAY9L,EACZ+L,iBAAa/L,EACbgM,cAAUhM,EACViM,UAAMjM,EACNkM,UAAMlM,EACN4B,OAIN,CAmBA,SAASyU,GAAezU,GAWtB,MAVqC,CACnC9G,MAAO,OACP+Q,gBAAY7L,EACZ8L,gBAAY9L,EACZ+L,iBAAa/L,EACbgM,cAAUhM,EACViM,UAAMjM,EACNkM,UAAMlM,EACN4B,OAGJ,oVFzuJO,SACLnF,GAoBA,YApB8B,IAA9BA,IAAAA,EAAiC,CAAA,GAoB1BJ,GAlBP,SACEK,EACAI,GAEA,IAAIzB,SAAEA,EAAQC,OAAEA,EAAMC,KAAEA,GAASmB,EAAO/B,SACxC,OAAOM,EACL,GACA,CAAEI,WAAUC,SAAQC,QAEnBuB,EAAchC,OAASgC,EAAchC,MAAMD,KAAQ,KACnDiC,EAAchC,OAASgC,EAAchC,MAAMC,KAAQ,UAExD,IAEA,SAA2B2B,EAAgBvB,GACzC,MAAqB,iBAAPA,EAAkBA,EAAKU,EAAWV,EAClD,GAKE,KACAsB,EAEJ,sBA8BO,SACLA,GAqDA,YArD2B,IAA3BA,IAAAA,EAA8B,CAAA,GAqDvBJ,GAnDP,SACEK,EACAI,GAEA,IAAIzB,SACFA,EAAW,IAAGC,OACdA,EAAS,GAAEC,KACXA,EAAO,IACLC,EAAUkB,EAAO/B,SAASY,KAAKK,OAAO,IAY1C,OAJKP,EAAS6G,WAAW,MAAS7G,EAAS6G,WAAW,OACpD7G,EAAW,IAAMA,GAGZJ,EACL,GACA,CAAEI,WAAUC,SAAQC,QAEnBuB,EAAchC,OAASgC,EAAchC,MAAMD,KAAQ,KACnDiC,EAAchC,OAASgC,EAAchC,MAAMC,KAAQ,UAExD,IAEA,SAAwB2B,EAAgBvB,GACtC,IAAIqC,EAAOd,EAAOC,SAASqb,cAAc,QACrCta,EAAO,GAEX,GAAIF,GAAQA,EAAKya,aAAa,QAAS,CACrC,IAAI9Z,EAAMzB,EAAO/B,SAAS+C,KACtBxB,EAAYiC,EAAIhC,QAAQ,KAC5BuB,GAAsB,IAAfxB,EAAmBiC,EAAMA,EAAIyC,MAAM,EAAG1E,EAC/C,CAEA,OAAOwB,EAAO,KAAqB,iBAAPvC,EAAkBA,EAAKU,EAAWV,GAChE,IAEA,SAA8BR,EAAoBQ,GAChDd,EACkC,MAAhCM,EAASU,SAASU,OAAO,GAAU,6DAC0BmK,KAAKC,UAChEhL,OAGN,GAMEsB,EAEJ,wBAvPO,SACLA,QAA6B,IAA7BA,IAAAA,EAAgC,CAAA,GAEhC,IACI+L,GADA0P,eAAEA,EAAiB,CAAC,KAAIC,aAAEA,EAAYtb,SAAEA,GAAW,GAAUJ,EAEjE+L,EAAU0P,EAAe3Y,KAAI,CAAC6Y,EAAOxd,IACnCyd,EACED,EACiB,iBAAVA,EAAqB,KAAOA,EAAMtd,MAC/B,IAAVF,EAAc,eAAYoF,KAG9B,IAAIpF,EAAQ0d,EACM,MAAhBH,EAAuB3P,EAAQ7H,OAAS,EAAIwX,GAE1Cnb,EAASjD,EAAOkD,IAChBC,EAA4B,KAEhC,SAASob,EAAWxZ,GAClB,OAAOrD,KAAK8c,IAAI9c,KAAK+c,IAAI1Z,EAAG,GAAI0J,EAAQ7H,OAAS,EACnD,CACA,SAAS8X,IACP,OAAOjQ,EAAQ5N,EACjB,CACA,SAASyd,EACPld,EACAL,EACAC,QADU,IAAVD,IAAAA,EAAa,MAGb,IAAIH,EAAWM,EACbuN,EAAUiQ,IAAqBpd,SAAW,IAC1CF,EACAL,EACAC,GAQF,OANAV,EACkC,MAAhCM,EAASU,SAASU,OAAO,8DACkCmK,KAAKC,UAC9DhL,IAGGR,CACT,CAEA,SAAS4B,EAAWpB,GAClB,MAAqB,iBAAPA,EAAkBA,EAAKU,EAAWV,EAClD,CA0DA,MAxD6B,CACvBP,YACF,OAAOA,CACR,EACGoC,aACF,OAAOA,CACR,EACGrC,eACF,OAAO8d,GACR,EACDlc,aACAgB,UAAUpC,GACD,IAAIyC,IAAIrB,EAAWpB,GAAK,oBAEjC+C,eAAe/C,GACb,IAAIa,EAAqB,iBAAPb,EAAkBK,EAAUL,GAAMA,EACpD,MAAO,CACLE,SAAUW,EAAKX,UAAY,GAC3BC,OAAQU,EAAKV,QAAU,GACvBC,KAAMS,EAAKT,MAAQ,GAEtB,EACD6C,KAAKjD,EAAIL,GACPkC,EAASjD,EAAOsE,KAChB,IAAIqa,EAAeL,EAAqBld,EAAIL,GAC5CF,GAAS,EACT4N,EAAQmQ,OAAO/d,EAAO4N,EAAQ7H,OAAQ+X,GAClC7b,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAU+d,EAAcpb,MAAO,GAErD,EACDK,QAAQxC,EAAIL,GACVkC,EAASjD,EAAO6E,QAChB,IAAI8Z,EAAeL,EAAqBld,EAAIL,GAC5C0N,EAAQ5N,GAAS8d,EACb7b,GAAYK,GACdA,EAAS,CAAEF,SAAQrC,SAAU+d,EAAcpb,MAAO,GAErD,EACDuB,GAAGvB,GACDN,EAASjD,EAAOkD,IAChB,IAAII,EAAYib,EAAW1d,EAAQ0C,GAC/Bob,EAAelQ,EAAQnL,GAC3BzC,EAAQyC,EACJH,GACFA,EAAS,CAAEF,SAAQrC,SAAU+d,EAAcpb,SAE9C,EACDQ,OAAOC,IACLb,EAAWa,EACJ,KACLb,EAAW,IAAI,GAMvB,gCEiZO,SAAsB2L,GAC3B,MAAM+P,EAAe/P,EAAKnM,OACtBmM,EAAKnM,OACa,oBAAXA,OACPA,YACAsD,EACE6Y,OACoB,IAAjBD,QAC0B,IAA1BA,EAAajc,eAC2B,IAAxCic,EAAajc,SAASmc,cACzBC,GAAYF,EAOlB,IAAIzZ,EACJ,GANAnF,EACE4O,EAAK1J,OAAOwB,OAAS,EACrB,6DAIEkI,EAAKzJ,mBACPA,EAAqByJ,EAAKzJ,wBACrB,GAAIyJ,EAAKmQ,oBAAqB,CAEnC,IAAIA,EAAsBnQ,EAAKmQ,oBAC/B5Z,EAAsBI,IAAW,CAC/BiN,iBAAkBuM,EAAoBxZ,IAE1C,MACEJ,EAAqBoN,EAIvB,IAQIyM,EA6CAC,EArDA5Z,EAA0B,CAAA,EAE1B6Z,EAAaja,EACf2J,EAAK1J,OACLC,OACAY,EACAV,GAGEa,EAAW0I,EAAK1I,UAAY,IAC5BiT,EAAmBvK,EAAKuQ,uBAAyBnG,GAEjDhG,EAAoB7R,EAAA,CACtBie,mBAAmB,EACnBC,wBAAwB,EACxBC,qBAAqB,EACrBC,oBAAoB,EACpBlT,sBAAsB,EACtBmT,sCAAsC,GACnC5Q,EAAKoE,QAGNyM,EAAuC,KAEvC9R,EAAc,IAAI3I,IAElB0a,EAAsD,KAEtDC,EAAkE,KAElEC,EAAsD,KAOtDC,EAA8C,MAAtBjR,EAAKkR,cAE7BC,EAAiB/Z,EAAYkZ,EAAYtQ,EAAK9L,QAAQpC,SAAUwF,GAChE8Z,EAAkC,KAEtC,GAAsB,MAAlBD,EAAwB,CAG1B,IAAIxb,EAAQ2P,GAAuB,IAAK,CACtC9S,SAAUwN,EAAK9L,QAAQpC,SAASU,YAE9B+F,QAAEA,EAAO5B,MAAEA,GAAUsX,GAAuBqC,GAChDa,EAAiB5Y,EACjB6Y,EAAgB,CAAE,CAACza,EAAME,IAAKlB,EAChC,CAGA,IAiDI0b,EAjDAC,EAAgBH,EAAevW,MAAM+L,GAAMA,EAAEhQ,MAAMoR,OACnDwJ,EAAaJ,EAAevW,MAAM+L,GAAMA,EAAEhQ,MAAMqR,SACpD,GAAIsJ,EAGFjB,GAAc,OACT,GAAKkB,EAGL,GAAInN,EAAOsM,oBAAqB,CAIrC,IAAI7X,EAAamH,EAAKkR,cAAgBlR,EAAKkR,cAAcrY,WAAa,KAClEqP,EAASlI,EAAKkR,cAAgBlR,EAAKkR,cAAchJ,OAAS,KAC1DsJ,EAAsB7K,IAEnBA,EAAEhQ,MAAMqR,SAKe,mBAAnBrB,EAAEhQ,MAAMqR,SACY,IAA3BrB,EAAEhQ,MAAMqR,OAAOC,WAMdpP,QAAyC1B,IAA3B0B,EAAW8N,EAAEhQ,MAAME,KACjCqR,QAAiC/Q,IAAvB+Q,EAAOvB,EAAEhQ,MAAME,KAK9B,GAAIqR,EAAQ,CACV,IAAI/V,EAAMgf,EAAezK,WACtBC,QAA8BxP,IAAxB+Q,EAAQvB,EAAEhQ,MAAME,MAEzBwZ,EAAcc,EAAepZ,MAAM,EAAG5F,EAAM,GAAG6F,MAAMwZ,EACvD,MACEnB,EAAcc,EAAenZ,MAAMwZ,EAEvC,MAGEnB,EAAoC,MAAtBrQ,EAAKkR,mBAtCnBb,GAAc,EA0ChB,IA0BIoB,EA1BAxf,EAAqB,CACvByf,cAAe1R,EAAK9L,QAAQC,OAC5BrC,SAAUkO,EAAK9L,QAAQpC,SACvByG,QAAS4Y,EACTd,cACAtB,WAAYhM,EAEZ4O,sBAA6C,MAAtB3R,EAAKkR,eAAgC,KAC5DU,oBAAoB,EACpBC,aAAc,OACdhZ,WAAamH,EAAKkR,eAAiBlR,EAAKkR,cAAcrY,YAAe,CAAE,EACvEiV,WAAa9N,EAAKkR,eAAiBlR,EAAKkR,cAAcpD,YAAe,KACrE5F,OAASlI,EAAKkR,eAAiBlR,EAAKkR,cAAchJ,QAAWkJ,EAC7D9H,SAAU,IAAIwI,IACdC,SAAU,IAAID,KAKZE,EAA+BC,EAAc7d,IAI7C8d,GAA4B,EAM5BC,GAA+B,EAG/BC,EAAmD,IAAIN,IAMvDO,EAAmD,KAInDC,GAA8B,EAM9BvL,GAAyB,EAIzBC,EAAoC,GAIpCC,EAAkC,GAGlCsL,EAAmB,IAAIT,IAGvBU,EAAqB,EAKrBC,GAA2B,EAG3BC,GAAiB,IAAIZ,IAGrB1K,GAAmB,IAAIhR,IAGvB+Q,GAAmB,IAAI2K,IAGvBa,GAAiB,IAAIb,IAIrB5K,GAAkB,IAAI9Q,IAMtBwW,GAAkB,IAAIkF,IAItBc,GAAmB,IAAId,IAIvBe,IAA0B,EA+G9B,SAASC,GACPC,EACA7N,QAGC,IAHDA,IAAAA,EAGI,CAAA,GAEJjT,EAAKM,EAAA,CAAA,EACAN,EACA8gB,GAKL,IAAIC,EAA8B,GAC9BC,EAAgC,GAEhC7O,EAAOoM,mBACTve,EAAMqX,SAAS7P,SAAQ,CAAC4P,EAASnX,KACT,SAAlBmX,EAAQpX,QACNiV,GAAgBiC,IAAIjX,GAEtB+gB,EAAoB1d,KAAKrD,GAIzB8gB,EAAkBzd,KAAKrD,GAE3B,IAOJ,IAAI6M,GAAatF,SAASqH,GACxBA,EAAW7O,EAAO,CAChBiV,gBAAiB+L,EACjBC,4BAA6BhO,EAAKiO,mBAClCC,oBAAuC,IAAnBlO,EAAKmO,cAKzBjP,EAAOoM,oBACTwC,EAAkBvZ,SAASvH,GAAQD,EAAMqX,SAAS5I,OAAOxO,KACzD+gB,EAAoBxZ,SAASvH,GAAQohB,GAAcphB,KAEvD,CAOA,SAASqhB,GACPzhB,EACAihB,EAA0ES,GAEpE,IAAAC,EAAAC,EAAA,IAaF5F,GAdJuF,UAAEA,QAAoC,IAAAG,EAAG,CAAA,EAAEA,EAOvCG,EACkB,MAApB1hB,EAAM6b,YACyB,MAA/B7b,EAAM8c,WAAW/L,YACjB6C,GAAiB5T,EAAM8c,WAAW/L,aACP,YAA3B/Q,EAAM8c,WAAW9c,QACe,KAAlB,OAAdwhB,EAAA3hB,EAASG,YAAK,EAAdwhB,EAAgBG,aAKd9F,EAFAiF,EAASjF,WACPvS,OAAOsY,KAAKd,EAASjF,YAAYhW,OAAS,EAC/Bib,EAASjF,WAGT,KAEN6F,EAEI1hB,EAAM6b,WAGN,KAIf,IAAIjV,EAAaka,EAASla,WACtB4U,GACExb,EAAM4G,WACNka,EAASla,WACTka,EAASxa,SAAW,GACpBwa,EAAS7K,QAEXjW,EAAM4G,WAINkZ,EAAW9f,EAAM8f,SACjBA,EAAS1Q,KAAO,IAClB0Q,EAAW,IAAID,IAAIC,GACnBA,EAAStY,SAAQ,CAACqC,EAAGoF,IAAM6Q,EAAS5P,IAAIjB,EAAGqC,MAK7C,IAqBI4P,EArBAvB,GAC4B,IAA9BM,GACgC,MAA/BjgB,EAAM8c,WAAW/L,YAChB6C,GAAiB5T,EAAM8c,WAAW/L,cACF,KAAhC0Q,OAAAA,EAAA5hB,EAASG,YAATyhB,EAAAA,EAAgBE,aAoBpB,GAlBIxD,IACFE,EAAaF,EACbA,OAAqBjZ,GAGnBmb,GAEON,IAAkBC,EAAc7d,MAEhC4d,IAAkBC,EAAczc,KACzCwK,EAAK9L,QAAQqB,KAAKzD,EAAUA,EAASG,OAC5B+f,IAAkBC,EAAclc,SACzCiK,EAAK9L,QAAQY,QAAQhD,EAAUA,EAASG,QAMtC+f,IAAkBC,EAAc7d,IAAK,CAEvC,IAAI0f,EAAa1B,EAAuB5R,IAAIvO,EAAMH,SAASU,UACvDshB,GAAcA,EAAW3K,IAAIrX,EAASU,UACxC2gB,EAAqB,CACnBY,gBAAiB9hB,EAAMH,SACvB+d,aAAc/d,GAEPsgB,EAAuBjJ,IAAIrX,EAASU,YAG7C2gB,EAAqB,CACnBY,gBAAiBjiB,EACjB+d,aAAc5d,EAAMH,UAGzB,MAAM,GAAIqgB,EAA8B,CAEvC,IAAI6B,EAAU5B,EAAuB5R,IAAIvO,EAAMH,SAASU,UACpDwhB,EACFA,EAAQ/T,IAAInO,EAASU,WAErBwhB,EAAU,IAAI5d,IAAY,CAACtE,EAASU,WACpC4f,EAAuBjQ,IAAIlQ,EAAMH,SAASU,SAAUwhB,IAEtDb,EAAqB,CACnBY,gBAAiB9hB,EAAMH,SACvB+d,aAAc/d,EAElB,CAEAghB,GAAWvgB,EAAA,CAAA,EAEJwgB,EAAQ,CACXjF,aACAjV,aACA6Y,cAAeM,EACflgB,WACAue,aAAa,EACbtB,WAAYhM,EACZ8O,aAAc,OACdF,sBAAuBsC,GACrBniB,EACAihB,EAASxa,SAAWtG,EAAMsG,SAE5BqZ,qBACAG,aAEF,CACEoB,qBACAE,WAAyB,IAAdA,IAKfrB,EAAgBC,EAAc7d,IAC9B8d,GAA4B,EAC5BC,GAA+B,EAC/BG,GAA8B,EAC9BvL,GAAyB,EACzBC,EAA0B,GAC1BC,EAAwB,EAC1B,CAoJA9F,eAAe+S,GACbxC,EACA5f,EACAoT,GAgBAuM,GAA+BA,EAA4BxQ,QAC3DwQ,EAA8B,KAC9BO,EAAgBN,EAChBY,GACoD,KAAjDpN,GAAQA,EAAKiP,gCAi3ClB,SACEriB,EACAyG,GAEA,GAAIuY,GAAwBE,EAAmB,CAC7C,IAAI9e,EAAMkiB,GAAatiB,EAAUyG,GACjCuY,EAAqB5e,GAAO8e,GAC9B,CACF,CAr3CEqD,CAAmBpiB,EAAMH,SAAUG,EAAMsG,SACzC2Z,GAAkE,KAArChN,GAAQA,EAAK0M,oBAE1CO,GAAuE,KAAvCjN,GAAQA,EAAKoP,sBAE7C,IAAIjN,EAAc+I,GAAsBE,EACpCiE,EAAoBrP,GAAQA,EAAKsP,mBACjCjc,EAAUnB,EAAYiQ,EAAavV,EAAUwF,GAC7C+b,GAAyC,KAA5BnO,GAAQA,EAAKmO,WAG9B,IAAK9a,EAAS,CACZ,IAAI5C,EAAQ2P,GAAuB,IAAK,CAAE9S,SAAUV,EAASU,YACvD+F,QAASkc,EAAe9d,MAAEA,GAC9BsX,GAAuB5G,GAczB,OAZAqN,UACAnB,GACEzhB,EACA,CACEyG,QAASkc,EACT5b,WAAY,CAAE,EACdqP,OAAQ,CACN,CAACvR,EAAME,IAAKlB,IAGhB,CAAE0d,aAGN,CAQA,GACEphB,EAAMoe,cACLtJ,GAkzGP,SAA0BpP,EAAaC,GACrC,GAAID,EAAEnF,WAAaoF,EAAEpF,UAAYmF,EAAElF,SAAWmF,EAAEnF,OAC9C,OAAO,EAGT,GAAe,KAAXkF,EAAEjF,KAEJ,MAAkB,KAAXkF,EAAElF,KACJ,GAAIiF,EAAEjF,OAASkF,EAAElF,KAEtB,OAAO,EACF,GAAe,KAAXkF,EAAElF,KAEX,OAAO,EAKT,OAAO,CACT,CAp0GMiiB,CAAiB1iB,EAAMH,SAAUA,MAC/BoT,GAAQA,EAAKgB,YAAcL,GAAiBX,EAAKgB,WAAWlD,aAG9D,YADAuQ,GAAmBzhB,EAAU,CAAEyG,WAAW,CAAE8a,cAK9C5B,EAA8B,IAAIlS,gBAClC,IAMI+H,EANApD,EAAUuI,GACZzM,EAAK9L,QACLpC,EACA2f,EAA4B/R,OAC5BwF,GAAQA,EAAKgB,YAIf,GAAIhB,GAAQA,EAAK8H,aAKf1F,EAAsB,CACpB6F,GAAoB5U,GAAS5B,MAAME,GACnC,CAAE4O,KAAMvP,EAAWP,MAAOA,MAAOuP,EAAK8H,oBAEnC,GACL9H,GACAA,EAAKgB,YACLL,GAAiBX,EAAKgB,WAAWlD,YACjC,CAEA,IAAIuE,QAyDRpG,eACE+C,EACApS,EACAoU,EACA3N,EACA2M,QAAgD,IAAhDA,IAAAA,EAAmD,CAAA,GAKnD,IAII5K,EAPJsa,KAIA9B,GAAY,CAAE/D,WADGE,GAAwBnd,EAAUoU,IACvB,CAAEmN,WAA8B,IAAnBnO,EAAKmO,YAI9C,IAAIwB,EAAcrL,GAAejR,EAASzG,GAE1C,GAAK+iB,EAAYle,MAAMxC,QAAW0gB,EAAYle,MAAMoR,KAS7C,CASL,GAFAzN,SANoBwa,GAClB,SACA5Q,EACA,CAAC2Q,GACDtc,IAEe,GAEb2L,EAAQxE,OAAOe,QACjB,MAAO,CAAEsU,gBAAgB,EAE7B,MApBEza,EAAS,CACPmL,KAAMvP,EAAWP,MACjBA,MAAO2P,GAAuB,IAAK,CACjCf,OAAQL,EAAQK,OAChB/R,SAAUV,EAASU,SACnB0W,QAAS2L,EAAYle,MAAME,MAiBjC,GAAIoW,GAAiB3S,GAAS,CAC5B,IAAIxF,EACJ,GAAIoQ,GAAwB,MAAhBA,EAAKpQ,QACfA,EAAUoQ,EAAKpQ,YACV,CASLA,EALeuX,GACb/R,EAAO6R,SAASlK,QAAQzB,IAAI,YAC5B,IAAIzL,IAAImP,EAAQ5O,KAChBgC,KAEqBrF,EAAMH,SAASU,SAAWP,EAAMH,SAASW,MAClE,CAKA,aAJMuiB,GAAwB9Q,EAAS5J,EAAQ,CAC7C4L,aACApR,YAEK,CAAEigB,gBAAgB,EAC3B,CAEA,GAAI3H,GAAiB9S,GACnB,MAAMgL,GAAuB,IAAK,CAAEG,KAAM,iBAG5C,GAAI+B,GAAclN,GAAS,CAGzB,IAAI4S,EAAgBC,GAAoB5U,EAASsc,EAAYle,MAAME,IAUnE,OAJ+B,KAA1BqO,GAAQA,EAAKpQ,WAChBkd,EAAgBC,EAAczc,MAGzB,CACL8R,oBAAqB,CAAC4F,EAAcvW,MAAME,GAAIyD,GAElD,CAEA,MAAO,CACLgN,oBAAqB,CAACuN,EAAYle,MAAME,GAAIyD,GAEhD,CAhJ6B2a,CACvB/Q,EACApS,EACAoT,EAAKgB,WACL3N,EACA,CAAEzD,QAASoQ,EAAKpQ,QAASue,cAG3B,GAAI9L,EAAawN,eACf,OAGFzN,EAAsBC,EAAaD,oBACnCiN,EAAoBvF,GAAqBld,EAAUoT,EAAKgB,YACxDmN,GAAY,EAGZnP,EAAUuI,GACRzM,EAAK9L,QACLgQ,EAAQ5O,IACR4O,EAAQxE,OAEZ,CAGA,IAAIqV,eAAEA,EAAclc,WAAEA,EAAUqP,OAAEA,SA2HpC/G,eACE+C,EACApS,EACAyG,EACAic,EACAtO,EACAgP,EACApgB,EACAqgB,EACA9B,EACA/L,GAGA,IAAIiN,EACFC,GAAsBxF,GAAqBld,EAAUoU,GAInDkP,EACFlP,GACAgP,GACApG,GAA4ByF,GAE1BlN,EAAc+I,GAAsBE,GACnC9F,EAAexB,GAAwBpC,GAC1C5G,EAAK9L,QACLjC,EACAsG,EACA6c,EACAtjB,EACAsS,EAAOsM,sBAA4C,IAArByE,EAC9B/Q,EAAOwM,qCACP7J,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACA/P,EACAgQ,GAeF,GATAoN,IACGxL,KACG3Q,GAAWA,EAAQqC,MAAM+L,GAAMA,EAAEhQ,MAAME,KAAOqS,MAC/CsB,GAAiBA,EAAc5P,MAAM+L,GAAMA,EAAEhQ,MAAME,KAAOqS,MAG/DuJ,IAA4BD,EAGC,IAAzBhI,EAAc1S,QAAgD,IAAhCkR,EAAqBlR,OAAc,CACnE,IAAIud,EAAkBC,KAgBtB,OAfA/B,GACEzhB,EAAQS,EAAA,CAENgG,UACAM,WAAY,CAAE,EAEdqP,OACEZ,GAAuBE,GAAcF,EAAoB,IACrD,CAAE,CAACA,EAAoB,IAAKA,EAAoB,GAAG3R,OACnD,MACHkY,GAAuBvG,GACtB+N,EAAkB,CAAE/L,SAAU,IAAIwI,IAAI7f,EAAMqX,WAAc,CAAE,GAElE,CAAE+J,cAEG,CAAE0B,gBAAgB,EAC3B,CAQA,KACGzC,GACClO,EAAOsM,qBAAwByE,GACjC,CAUA,IAAIrH,EATJ9E,EAAqBvP,SAAS8b,IAC5B,IAAIlM,EAAUpX,EAAMqX,SAAS9I,IAAI+U,EAAGrjB,KAChCsjB,EAAsBtG,QACxB/X,EACAkS,EAAUA,EAAQtQ,UAAO5B,GAE3BlF,EAAMqX,SAASnH,IAAIoT,EAAGrjB,IAAKsjB,EAAoB,IAI7ClO,IAAwBE,GAAcF,EAAoB,IAI5DwG,EAAa,CACX,CAACxG,EAAoB,IAAKA,EAAoB,GAAGvO,MAE1C9G,EAAM6b,aAEbA,EAD2C,IAAzCvS,OAAOsY,KAAK5hB,EAAM6b,YAAYhW,OACnB,KAEA7F,EAAM6b,YAIvBgF,GAAWvgB,EAAA,CAEPwc,WAAYwF,QACOpd,IAAf2W,EAA2B,CAAEA,cAAe,GAC5C9E,EAAqBlR,OAAS,EAC9B,CAAEwR,SAAU,IAAIwI,IAAI7f,EAAMqX,WAC1B,CAAE,GAER,CACE+J,aAGN,CAEArK,EAAqBvP,SAAS8b,IACxBhD,EAAiBpJ,IAAIoM,EAAGrjB,MAC1BujB,GAAaF,EAAGrjB,KAEdqjB,EAAGjW,YAILiT,EAAiBpQ,IAAIoT,EAAGrjB,IAAKqjB,EAAGjW,WAClC,IAIF,IAAIoW,EAAiCA,IACnC1M,EAAqBvP,SAASwP,GAAMwM,GAAaxM,EAAE/W,OACjDuf,GACFA,EAA4B/R,OAAOvK,iBACjC,QACAugB,GAIJ,IAAIC,cAAEA,EAAarI,eAAEA,SACbsI,GACJ3jB,EAAMsG,QACNA,EACAiS,EACAxB,EACA9E,GAGJ,GAAIA,EAAQxE,OAAOe,QACjB,MAAO,CAAEsU,gBAAgB,GAMvBtD,GACFA,EAA4B/R,OAAOtK,oBACjC,QACAsgB,GAGJ1M,EAAqBvP,SAAS8b,GAAOhD,EAAiB7R,OAAO6U,EAAGrjB,OAGhE,IAAI6P,EAAWqM,GAAa,IAAIuH,KAAkBrI,IAClD,GAAIvL,EAAU,CACZ,GAAIA,EAAS5P,KAAOqY,EAAc1S,OAAQ,CAIxC,IAAI+d,EACF7M,EAAqBjH,EAAS5P,IAAMqY,EAAc1S,QAAQ5F,IAC5DkV,GAAiBnH,IAAI4V,EACvB,CAIA,aAHMb,GAAwB9Q,EAASnC,EAASzH,OAAQ,CACtDxF,YAEK,CAAEigB,gBAAgB,EAC3B,CAGA,IAAIlc,WAAEA,EAAUqP,OAAEA,GAAWmF,GAC3Bpb,EACAsG,EACAiS,EACAmL,EACArO,EACA0B,EACAsE,EACAV,IAIFA,GAAgBnT,SAAQ,CAACsS,EAAc7C,KACrC6C,EAAahL,WAAWN,KAIlBA,GAAWsL,EAAahM,OAC1B6M,GAAgBlM,OAAOwI,EACzB,GACA,IAIA9E,EAAOsM,qBAAuByE,GAAoBljB,EAAMiW,QAC1D3M,OAAOoE,QAAQ1N,EAAMiW,QAClBrN,QAAOgF,IAAA,IAAEhJ,GAAGgJ,EAAA,OAAM2K,EAAc5P,MAAM+L,GAAMA,EAAEhQ,MAAME,KAAOA,GAAG,IAC9D4C,SAAQ8H,IAAsB,IAApB2H,EAASvT,GAAM4L,EACxB2G,EAAS3M,OAAOzF,OAAOoS,GAAU,CAAA,EAAI,CAAEgB,CAACA,GAAUvT,GAAQ,IAIhE,IAAI0f,EAAkBC,KAClBQ,EAAqBC,GAAqBtD,GAC1CuD,EACFX,GAAmBS,GAAsB9M,EAAqBlR,OAAS,EAEzE,OAAAvF,EAAA,CACEsG,aACAqP,UACI8N,EAAuB,CAAE1M,SAAU,IAAIwI,IAAI7f,EAAMqX,WAAc,CAAE,EAEzE,CAjWqD2M,CACjD/R,EACApS,EACAyG,EACAgc,EACArP,GAAQA,EAAKgB,WACbhB,GAAQA,EAAKgQ,kBACbhQ,GAAQA,EAAKpQ,QACboQ,IAAkC,IAA1BA,EAAKiQ,iBACb9B,EACA/L,GAGEyN,IAOJtD,EAA8B,KAE9B8B,GAAmBzhB,EAAQS,EAAA,CACzBgG,WACGsV,GAAuBvG,GAAoB,CAC9CzO,aACAqP,YAEJ,CA4wBA/G,eAAe6T,GACb9Q,EACAnC,EAAwBmU,GAUxB,IATAhQ,WACEA,EAAUgP,kBACVA,EAAiBpgB,QACjBA,QAKD,IAAAohB,EAAG,CAAA,EAAEA,EAEFnU,EAASoK,SAASlK,QAAQkH,IAAI,wBAChCpC,GAAyB,GAG3B,IAAIjV,EAAWiQ,EAASoK,SAASlK,QAAQzB,IAAI,YAC7CpP,EAAUU,EAAU,uDACpBA,EAAWua,GACTva,EACA,IAAIiD,IAAImP,EAAQ5O,KAChBgC,GAEF,IAAI6e,EAAmB/jB,EAAeH,EAAMH,SAAUA,EAAU,CAC9D8hB,aAAa,IAGf,GAAI5D,EAAW,CACb,IAAIoG,GAAmB,EAEvB,GAAIrU,EAASoK,SAASlK,QAAQkH,IAAI,2BAEhCiN,GAAmB,OACd,GAAI1S,EAAmB1I,KAAKlJ,GAAW,CAC5C,MAAMwD,EAAM0K,EAAK9L,QAAQQ,UAAU5C,GACnCskB,EAEE9gB,EAAIV,SAAWmb,EAAaje,SAAS8C,QAEI,MAAzC2C,EAAcjC,EAAI9C,SAAU8E,EAChC,CAEA,GAAI8e,EAMF,YALIthB,EACFib,EAAaje,SAASgD,QAAQhD,GAE9Bie,EAAaje,SAASgE,OAAOhE,GAInC,CAIA2f,EAA8B,KAE9B,IAAI4E,GACU,IAAZvhB,EAAmBmd,EAAclc,QAAUkc,EAAczc,MAIvDwN,WAAEA,EAAUC,WAAEA,EAAUC,YAAEA,GAAgBjR,EAAM8c,YAEjD7I,IACAgP,GACDlS,GACAC,GACAC,IAEAgD,EAAa4I,GAA4B7c,EAAM8c,aAMjD,IAAIqG,EAAmBlP,GAAcgP,EACrC,GACEpS,EAAkCqG,IAAIpH,EAASoK,SAASnK,SACxDoT,GACAvP,GAAiBuP,EAAiBpS,kBAE5BkR,GAAgBmC,EAAuBF,EAAkB,CAC7DjQ,WAAU3T,EAAA,CAAA,EACL6iB,EAAgB,CACnBnS,WAAYnR,IAGd8f,mBAAoBM,QAEjB,CAGL,IAAIsC,EAAqBxF,GACvBmH,EACAjQ,SAEIgO,GAAgBmC,EAAuBF,EAAkB,CAC7D3B,qBAEAU,oBAEAtD,mBAAoBM,GAExB,CACF,CAIA/Q,eAAe2T,GACbrP,EACAvB,EACAsG,EACAjS,GAEA,IACE,IAAIqS,QAAgBN,GAClBC,EACA9E,EACAvB,EACAsG,EACAjS,EACA9B,EACAF,GAGF,aAAa6I,QAAQiL,IACnBO,EAAQlU,KAAI,CAAC4D,EAAQrC,KACnB,GAAIoW,GAAwB/T,GAAS,CACnC,IAAI6R,EAAW7R,EAAOA,OACtB,MAAO,CACLmL,KAAMvP,EAAW6L,SACjBoK,SAAUD,GACRC,EACAjI,EACAsG,EAAcvS,GAAGtB,MAAME,GACvB0B,EACAjB,EACA8M,EAAO3G,sBAGb,CAEA,OAAOgO,GAAiCnR,EAAO,IAUrD,CAPE,MAAO1I,GAGP,OAAO4Y,EAAc9T,KAAI,KAAO,CAC9B+O,KAAMvP,EAAWP,MACjBA,MAAO/D,KAEX,CACF,CAEAuP,eAAeyU,GACbpH,EACAjW,EACAiS,EACA8L,EACApS,GAEA,IAAKyR,KAAkBrI,SAAwBlO,QAAQiL,IAAI,CACzDG,EAAc1S,OACVgd,GAAiB,SAAU5Q,EAASsG,EAAejS,GACnD,MACD+d,EAAe5f,KAAKuS,IACrB,GAAIA,EAAE1Q,SAAW0Q,EAAErQ,OAASqQ,EAAE3J,WAAY,CAMxC,OAAOwV,GACL,SANmBrI,GACnBzM,EAAK9L,QACL+U,EAAE9V,KACF8V,EAAE3J,WAAWI,QAKb,CAACuJ,EAAErQ,OACHqQ,EAAE1Q,SACF6H,MAAMf,GAAMA,EAAE,IAClB,CACE,OAAOD,QAAQgC,QAAoB,CACjCqE,KAAMvP,EAAWP,MACjBA,MAAO2P,GAAuB,IAAK,CACjC9S,SAAUyW,EAAE9V,QAGlB,MAsBJ,aAlBMiM,QAAQiL,IAAI,CAChBkE,GACEC,EACAhE,EACAmL,EACAA,EAAcjf,KAAI,IAAMwN,EAAQxE,UAChC,EACAzN,EAAM4G,YAER0V,GACEC,EACA8H,EAAe5f,KAAKuS,GAAMA,EAAErQ,QAC5B0U,EACAgJ,EAAe5f,KAAKuS,GAAOA,EAAE3J,WAAa2J,EAAE3J,WAAWI,OAAS,QAChE,KAIG,CACLiW,gBACArI,iBAEJ,CAEA,SAASsH,KAEP7N,GAAyB,EAIzBC,EAAwBzR,QAAQmf,MAGhCvN,GAAiB1N,SAAQ,CAACqC,EAAG5J,KACvBqgB,EAAiBpJ,IAAIjX,KACvB+U,EAAsB1R,KAAKrD,GAC3BujB,GAAavjB,GACf,GAEJ,CAEA,SAASqkB,GACPrkB,EACAmX,EACAnE,QAA6B,IAA7BA,IAAAA,EAAgC,CAAA,GAEhCjT,EAAMqX,SAASnH,IAAIjQ,EAAKmX,GACxByJ,GACE,CAAExJ,SAAU,IAAIwI,IAAI7f,EAAMqX,WAC1B,CAAE+J,WAAwC,KAA5BnO,GAAQA,EAAKmO,YAE/B,CAEA,SAASmD,GACPtkB,EACAgX,EACAvT,EACAuP,QAA6B,IAA7BA,IAAAA,EAAgC,CAAA,GAEhC,IAAIgI,EAAgBC,GAAoBlb,EAAMsG,QAAS2Q,GACvDoK,GAAcphB,GACd4gB,GACE,CACE5K,OAAQ,CACN,CAACgF,EAAcvW,MAAME,IAAKlB,GAE5B2T,SAAU,IAAIwI,IAAI7f,EAAMqX,WAE1B,CAAE+J,WAAwC,KAA5BnO,GAAQA,EAAKmO,YAE/B,CAEA,SAASoD,GAAwBvkB,GAS/B,OARIkS,EAAOoM,oBACTmC,GAAexQ,IAAIjQ,GAAMygB,GAAenS,IAAItO,IAAQ,GAAK,GAGrDgV,GAAgBiC,IAAIjX,IACtBgV,GAAgBxG,OAAOxO,IAGpBD,EAAMqX,SAAS9I,IAAItO,IAAQoR,CACpC,CAEA,SAASgQ,GAAcphB,GACrB,IAAImX,EAAUpX,EAAMqX,SAAS9I,IAAItO,IAK/BqgB,EAAiBpJ,IAAIjX,IACnBmX,GAA6B,YAAlBA,EAAQpX,OAAuBygB,GAAevJ,IAAIjX,IAE/DujB,GAAavjB,GAEfiV,GAAiBzG,OAAOxO,GACxBwgB,GAAehS,OAAOxO,GACtBkV,GAAiB1G,OAAOxO,GACxBgV,GAAgBxG,OAAOxO,GACvBD,EAAMqX,SAAS5I,OAAOxO,EACxB,CAiBA,SAASujB,GAAavjB,GACpB,IAAIoN,EAAaiT,EAAiB/R,IAAItO,GACtCd,EAAUkO,EAA0CpN,8BAAAA,GACpDoN,EAAW2B,QACXsR,EAAiB7R,OAAOxO,EAC1B,CAEA,SAASwkB,GAAiB7C,GACxB,IAAK,IAAI3hB,KAAO2hB,EAAM,CACpB,IACItG,EAAcC,GADJiJ,GAAWvkB,GACgB6G,MACzC9G,EAAMqX,SAASnH,IAAIjQ,EAAKqb,EAC1B,CACF,CAEA,SAAS+H,KACP,IAAIqB,EAAW,GACXtB,GAAkB,EACtB,IAAK,IAAInjB,KAAOkV,GAAkB,CAChC,IAAIiC,EAAUpX,EAAMqX,SAAS9I,IAAItO,GACjCd,EAAUiY,EAA8BnX,qBAAAA,GAClB,YAAlBmX,EAAQpX,QACVmV,GAAiB1G,OAAOxO,GACxBykB,EAASphB,KAAKrD,GACdmjB,GAAkB,EAEtB,CAEA,OADAqB,GAAiBC,GACVtB,CACT,CAEA,SAASU,GAAqBa,GAC5B,IAAIC,EAAa,GACjB,IAAK,IAAK3kB,EAAK2E,KAAO6b,GACpB,GAAI7b,EAAK+f,EAAU,CACjB,IAAIvN,EAAUpX,EAAMqX,SAAS9I,IAAItO,GACjCd,EAAUiY,EAA8BnX,qBAAAA,GAClB,YAAlBmX,EAAQpX,QACVwjB,GAAavjB,GACbwgB,GAAehS,OAAOxO,GACtB2kB,EAAWthB,KAAKrD,GAEpB,CAGF,OADAwkB,GAAiBG,GACVA,EAAW/e,OAAS,CAC7B,CAYA,SAASgf,GAAc5kB,GACrBD,EAAM8f,SAASrR,OAAOxO,GACtB0gB,GAAiBlS,OAAOxO,EAC1B,CAGA,SAAS6kB,GAAc7kB,EAAa8kB,GAClC,IAAIC,EAAUhlB,EAAM8f,SAASvR,IAAItO,IAAQqR,EAIzCnS,EACqB,cAAlB6lB,EAAQhlB,OAA8C,YAArB+kB,EAAW/kB,OACxB,YAAlBglB,EAAQhlB,OAA4C,YAArB+kB,EAAW/kB,OACxB,YAAlBglB,EAAQhlB,OAA4C,eAArB+kB,EAAW/kB,OACxB,YAAlBglB,EAAQhlB,OAA4C,cAArB+kB,EAAW/kB,OACxB,eAAlBglB,EAAQhlB,OAA+C,cAArB+kB,EAAW/kB,MAAsB,qCACjCglB,EAAQhlB,MAAK,OAAO+kB,EAAW/kB,OAGtE,IAAI8f,EAAW,IAAID,IAAI7f,EAAM8f,UAC7BA,EAAS5P,IAAIjQ,EAAK8kB,GAClBlE,GAAY,CAAEf,YAChB,CAEA,SAASmF,GAAqBC,GAQP,IARQpD,gBAC7BA,EAAelE,aACfA,EAAY6B,cACZA,GAKDyF,EACC,GAA8B,IAA1BvE,GAAiBvR,KACnB,OAKEuR,GAAiBvR,KAAO,GAC1B7P,GAAQ,EAAO,gDAGjB,IAAImO,EAAUV,MAAMjB,KAAK4U,GAAiBjT,YACrCyX,EAAYC,GAAmB1X,EAAQA,EAAQ7H,OAAS,GACzDmf,EAAUhlB,EAAM8f,SAASvR,IAAI4W,GAEjC,OAAIH,GAA6B,eAAlBA,EAAQhlB,WAAvB,EAQIolB,EAAgB,CAAEtD,kBAAiBlE,eAAc6B,kBAC5C0F,OADT,CAGF,CAEA,SAAS1C,GACP4C,GAEA,IAAIC,EAA8B,GAWlC,OAVA3K,GAAgBnT,SAAQ,CAAC+d,EAAKtO,KACvBoO,IAAaA,EAAUpO,KAI1BsO,EAAIxW,SACJuW,EAAkBhiB,KAAK2T,GACvB0D,GAAgBlM,OAAOwI,GACzB,IAEKqO,CACT,CA+BA,SAASnD,GAAatiB,EAAoByG,GACxC,GAAIwY,EAAyB,CAK3B,OAJUA,EACRjf,EACAyG,EAAQ7B,KAAKiQ,GAAMhO,EAA2BgO,EAAG1U,EAAM4G,gBAE3C/G,EAASI,GACzB,CACA,OAAOJ,EAASI,GAClB,CAYA,SAAS+hB,GACPniB,EACAyG,GAEA,GAAIuY,EAAsB,CACxB,IAAI5e,EAAMkiB,GAAatiB,EAAUyG,GAC7Bkf,EAAI3G,EAAqB5e,GAC7B,GAAiB,iBAANulB,EACT,OAAOA,CAEX,CACA,OAAO,IACT,CAkDA,OAtCApG,EAAS,CACH/Z,eACF,OAAOA,CACR,EACG8M,aACF,OAAOA,CACR,EACGnS,YACF,OAAOA,CACR,EACGqE,aACF,OAAOga,CACR,EACGzc,aACF,OAAOkc,CACR,EACD2H,WA13DF,WA4DE,GAzDA7G,EAAkB7Q,EAAK9L,QAAQe,QAC7BhC,IAAgD,IAA7CkB,OAAQud,EAAa5f,SAAEA,EAAQ2C,MAAEA,GAAOxB,EAGzC,GAAI4f,GAEF,YADAA,IAA0B,GAI5BrhB,EAC4B,IAA1BohB,GAAiBvR,MAAuB,MAAT5M,EAC/B,8YAQF,IAAI2iB,EAAaF,GAAsB,CACrCnD,gBAAiB9hB,EAAMH,SACvB+d,aAAc/d,EACd4f,kBAGF,OAAI0F,GAAuB,MAAT3iB,GAEhBoe,IAA0B,EAC1B7S,EAAK9L,QAAQ8B,IAAY,EAATvB,QAGhBsiB,GAAcK,EAAY,CACxBnlB,MAAO,UACPH,WACA0R,UACEuT,GAAcK,EAAa,CACzBnlB,MAAO,aACPuR,aAASrM,EACTsM,WAAOtM,EACPrF,aAGFkO,EAAK9L,QAAQ8B,GAAGvB,EACjB,EACDgP,QACE,IAAIsO,EAAW,IAAID,IAAI7f,EAAM8f,UAC7BA,EAAS5P,IAAIiV,EAAa7T,GAC1BuP,GAAY,CAAEf,YAChB,KAKGmC,GAAgBxC,EAAe5f,EAAS,IAI/Cke,EAAW,EA0kInB,SACE2H,EACAC,GAEA,IACE,IAAIC,EAAmBF,EAAQG,eAAeC,QAC5CjU,GAEF,GAAI+T,EAAkB,CACpB,IAAIzU,EAAO/F,KAAK8I,MAAM0R,GACtB,IAAK,IAAK3W,EAAG7E,KAAMd,OAAOoE,QAAQyD,GAAQ,CAAA,GACpC/G,GAAK4C,MAAMC,QAAQ7C,IACrBub,EAAYzV,IAAIjB,EAAG,IAAI9K,IAAIiG,GAAK,IAGtC,CAEA,CADA,MAAOzK,GACP,CAEJ,CA1lIMomB,CAA0BjI,EAAcqC,GACxC,IAAI6F,EAA0BA,IA2lIpC,SACEN,EACAC,GAEA,GAAIA,EAAYvW,KAAO,EAAG,CACxB,IAAI+B,EAAiC,CAAA,EACrC,IAAK,IAAKlC,EAAG7E,KAAMub,EACjBxU,EAAKlC,GAAK,IAAI7E,GAEhB,IACEsb,EAAQG,eAAeI,QACrBpU,EACAzG,KAAKC,UAAU8F,GAOnB,CALE,MAAOzN,GACPnE,GACE,EAC8DmE,8DAAAA,OAElE,CACF,CACF,CA/mIQwiB,CAA0BpI,EAAcqC,GAC1CrC,EAAa5a,iBAAiB,WAAY8iB,GAC1C5F,EAA8BA,IAC5BtC,EAAa3a,oBAAoB,WAAY6iB,EACjD,CAaA,OANKhmB,EAAMoe,aACT6D,GAAgBjC,EAAc7d,IAAKnC,EAAMH,SAAU,CACjDqjB,kBAAkB,IAIf9D,CACT,EAwyDEtQ,UAvxDF,SAAmB7L,GAEjB,OADA6J,EAAYkB,IAAI/K,GACT,IAAM6J,EAAY2B,OAAOxL,EAClC,EAqxDEkjB,wBA1FF,SACEC,EACAC,EACAC,GASA,GAPAzH,EAAuBuH,EACvBrH,EAAoBsH,EACpBvH,EAA0BwH,GAAU,MAK/BtH,GAAyBhf,EAAM8c,aAAehM,EAAiB,CAClEkO,GAAwB,EACxB,IAAIwG,EAAIxD,GAAuBhiB,EAAMH,SAAUG,EAAMsG,SAC5C,MAALkf,GACF3E,GAAY,CAAEnB,sBAAuB8F,GAEzC,CAEA,MAAO,KACL3G,EAAuB,KACvBE,EAAoB,KACpBD,EAA0B,IAAI,CAElC,EAkEEyH,SA7kDFrX,eAAeqX,EACblmB,EACA4S,GAEA,GAAkB,iBAAP5S,EAET,YADA0N,EAAK9L,QAAQ8B,GAAG1D,GAIlB,IAAImmB,EAAiBjU,GACnBvS,EAAMH,SACNG,EAAMsG,QACNjB,EACA8M,EAAOuM,mBACPre,EACA8R,EAAO3G,qBACPyH,MAAAA,OAAAA,EAAAA,EAAMR,YACF,MAAJQ,OAAI,EAAJA,EAAMP,WAEJxR,KAAEA,EAAI+S,WAAEA,EAAUvQ,MAAEA,GAAUoP,GAChCX,EAAOqM,wBACP,EACAgI,EACAvT,GAGE6O,EAAkB9hB,EAAMH,SACxB+d,EAAezd,EAAeH,EAAMH,SAAUqB,EAAM+R,GAAQA,EAAKjT,OAOrE4d,EAAYtd,EACPsd,CAAAA,EAAAA,EACA7P,EAAK9L,QAAQmB,eAAewa,IAGjC,IAAI6I,EAAcxT,GAAwB,MAAhBA,EAAKpQ,QAAkBoQ,EAAKpQ,aAAUqC,EAE5Dua,EAAgBO,EAAczc,MAEd,IAAhBkjB,EACFhH,EAAgBO,EAAclc,SACL,IAAhB2iB,GAGK,MAAdxS,GACAL,GAAiBK,EAAWlD,aAC5BkD,EAAWjD,aAAehR,EAAMH,SAASU,SAAWP,EAAMH,SAASW,SAMnEif,EAAgBO,EAAclc,SAGhC,IAAI6b,EACF1M,GAAQ,uBAAwBA,GACA,IAA5BA,EAAK0M,wBACLza,EAEFkc,GAAkD,KAArCnO,GAAQA,EAAKkO,oBAE1BgE,EAAaF,GAAsB,CACrCnD,kBACAlE,eACA6B,kBAGF,IAAI0F,EAwBJ,aAAalD,GAAgBxC,EAAe7B,EAAc,CACxD3J,aAGA8G,aAAcrX,EACdic,qBACA9c,QAASoQ,GAAQA,EAAKpQ,QACtBwf,qBAAsBpP,GAAQA,EAAKyT,wBACnCtF,cA9BA0D,GAAcK,EAAY,CACxBnlB,MAAO,UACPH,SAAU+d,EACVrM,UACEuT,GAAcK,EAAa,CACzBnlB,MAAO,aACPuR,aAASrM,EACTsM,WAAOtM,EACPrF,SAAU+d,IAGZ2I,EAASlmB,EAAI4S,EACd,EACDzB,QACE,IAAIsO,EAAW,IAAID,IAAI7f,EAAM8f,UAC7BA,EAAS5P,IAAIiV,EAAa7T,GAC1BuP,GAAY,CAAEf,YAChB,GAeN,EAo+CE6G,MA99BF,SACE1mB,EACAgX,EACArU,EACAqQ,GAEA,GAAIgL,EACF,MAAM,IAAI3e,MACR,oMAMAghB,EAAiBpJ,IAAIjX,IAAMujB,GAAavjB,GAC5C,IAAImhB,GAAkD,KAArCnO,GAAQA,EAAKkO,oBAE1B/L,EAAc+I,GAAsBE,EACpCmI,EAAiBjU,GACnBvS,EAAMH,SACNG,EAAMsG,QACNjB,EACA8M,EAAOuM,mBACP9b,EACAuP,EAAO3G,qBACPyL,EACI,MAAJhE,OAAI,EAAJA,EAAMP,UAEJpM,EAAUnB,EAAYiQ,EAAaoR,EAAgBnhB,GAEvD,IAAKiB,EAOH,YANAie,GACEtkB,EACAgX,EACA5D,GAAuB,IAAK,CAAE9S,SAAUimB,IACxC,CAAEpF,cAKN,IAAIlgB,KAAEA,EAAI+S,WAAEA,EAAUvQ,MAAEA,GAAUoP,GAChCX,EAAOqM,wBACP,EACAgI,EACAvT,GAGF,GAAIvP,EAEF,YADA6gB,GAAgBtkB,EAAKgX,EAASvT,EAAO,CAAE0d,cAIzC,IAAIza,EAAQ4Q,GAAejR,EAASpF,GAEpC+e,GAAkE,KAArChN,GAAQA,EAAK0M,oBAEtC1L,GAAcL,GAAiBK,EAAWlD,YA6BhD7B,eACEjP,EACAgX,EACA/V,EACAyF,EACAigB,EACAxF,EACAnN,GAKA,GAHA0O,KACAzN,GAAiBzG,OAAOxO,IAEnB0G,EAAMjC,MAAMxC,SAAWyE,EAAMjC,MAAMoR,KAAM,CAC5C,IAAIpS,EAAQ2P,GAAuB,IAAK,CACtCf,OAAQ2B,EAAWlD,WACnBxQ,SAAUW,EACV+V,QAASA,IAGX,YADAsN,GAAgBtkB,EAAKgX,EAASvT,EAAO,CAAE0d,aAEzC,CAGA,IAAIyF,EAAkB7mB,EAAMqX,SAAS9I,IAAItO,GACzCqkB,GAAmBrkB,EA0lGvB,SACEgU,EACA4S,GAYA,MAV2C,CACzC7mB,MAAO,aACP+Q,WAAYkD,EAAWlD,WACvBC,WAAYiD,EAAWjD,WACvBC,YAAagD,EAAWhD,YACxBC,SAAU+C,EAAW/C,SACrBC,KAAM8C,EAAW9C,KACjBC,KAAM6C,EAAW7C,KACjBtK,KAAM+f,EAAkBA,EAAgB/f,UAAO5B,EAGnD,CAzmG4B4hB,CAAqB7S,EAAY4S,GAAkB,CACzEzF,cAIF,IAAI2F,EAAkB,IAAIzZ,gBACtB0Z,EAAexM,GACjBzM,EAAK9L,QACLf,EACA6lB,EAAgBtZ,OAChBwG,GAEFqM,EAAiBpQ,IAAIjQ,EAAK8mB,GAE1B,IAAIE,EAAoB1G,EAOpBjL,SANsBuN,GACxB,SACAmE,EACA,CAACrgB,GACDigB,IAE+B,GAEjC,GAAII,EAAavZ,OAAOe,QAMtB,YAHI8R,EAAiB/R,IAAItO,KAAS8mB,GAChCzG,EAAiB7R,OAAOxO,IAQ5B,GAAIkS,EAAOoM,mBAAqBtJ,GAAgBiC,IAAIjX,IAClD,GAAI+a,GAAiB1F,IAAiBC,GAAcD,GAElD,YADAgP,GAAmBrkB,EAAKsb,QAAerW,QAIpC,CACL,GAAI8V,GAAiB1F,GAEnB,OADAgL,EAAiB7R,OAAOxO,GACpBugB,EAA0ByG,OAK5B3C,GAAmBrkB,EAAKsb,QAAerW,KAGvCiQ,GAAiBnH,IAAI/N,GACrBqkB,GAAmBrkB,EAAKgd,GAAkBhJ,IACnC8O,GAAwBiE,EAAc1R,EAAc,CACzD2N,kBAAmBhP,KAMzB,GAAIsB,GAAcD,GAEhB,YADAiP,GAAgBtkB,EAAKgX,EAAS3B,EAAa5R,MAG/C,CAEA,GAAIyX,GAAiB7F,GACnB,MAAMjC,GAAuB,IAAK,CAAEG,KAAM,iBAK5C,IAAIoK,EAAe5d,EAAM8c,WAAWjd,UAAYG,EAAMH,SAClDqnB,EAAsB1M,GACxBzM,EAAK9L,QACL2b,EACAmJ,EAAgBtZ,QAEd2H,EAAc+I,GAAsBE,EACpC/X,EACyB,SAA3BtG,EAAM8c,WAAW9c,MACbmF,EAAYiQ,EAAapV,EAAM8c,WAAWjd,SAAUwF,GACpDrF,EAAMsG,QAEZnH,EAAUmH,EAAS,gDAEnB,IAAI6gB,IAAW5G,EACfE,GAAevQ,IAAIjQ,EAAKknB,GAExB,IAAIC,EAAcnK,GAAkBhJ,EAAYqB,EAAaxO,MAC7D9G,EAAMqX,SAASnH,IAAIjQ,EAAKmnB,GAExB,IAAK7O,EAAexB,GAAwBpC,GAC1C5G,EAAK9L,QACLjC,EACAsG,EACA2N,EACA2J,GACA,EACAzL,EAAOwM,qCACP7J,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,EACA/P,EACA,CAACsB,EAAMjC,MAAME,GAAI0Q,IAMnByB,EACGnO,QAAQ0a,GAAOA,EAAGrjB,MAAQA,IAC1BuH,SAAS8b,IACR,IAAI+D,EAAW/D,EAAGrjB,IACd4mB,EAAkB7mB,EAAMqX,SAAS9I,IAAI8Y,GACrC9D,EAAsBtG,QACxB/X,EACA2hB,EAAkBA,EAAgB/f,UAAO5B,GAE3ClF,EAAMqX,SAASnH,IAAImX,EAAU9D,GACzBjD,EAAiBpJ,IAAImQ,IACvB7D,GAAa6D,GAEX/D,EAAGjW,YACLiT,EAAiBpQ,IAAImX,EAAU/D,EAAGjW,WACpC,IAGJwT,GAAY,CAAExJ,SAAU,IAAIwI,IAAI7f,EAAMqX,YAEtC,IAAIoM,EAAiCA,IACnC1M,EAAqBvP,SAAS8b,GAAOE,GAAaF,EAAGrjB,OAEvD8mB,EAAgBtZ,OAAOvK,iBACrB,QACAugB,GAGF,IAAIC,cAAEA,EAAarI,eAAEA,SACbsI,GACJ3jB,EAAMsG,QACNA,EACAiS,EACAxB,EACAmQ,GAGJ,GAAIH,EAAgBtZ,OAAOe,QACzB,OAGFuY,EAAgBtZ,OAAOtK,oBACrB,QACAsgB,GAGFhD,GAAehS,OAAOxO,GACtBqgB,EAAiB7R,OAAOxO,GACxB8W,EAAqBvP,SAAS4F,GAAMkT,EAAiB7R,OAAOrB,EAAEnN,OAE9D,IAAI6P,EAAWqM,GAAa,IAAIuH,KAAkBrI,IAClD,GAAIvL,EAAU,CACZ,GAAIA,EAAS5P,KAAOqY,EAAc1S,OAAQ,CAIxC,IAAI+d,EACF7M,EAAqBjH,EAAS5P,IAAMqY,EAAc1S,QAAQ5F,IAC5DkV,GAAiBnH,IAAI4V,EACvB,CACA,OAAOb,GAAwBmE,EAAqBpX,EAASzH,OAC/D,CAGA,IAAIzB,WAAEA,EAAUqP,OAAEA,GAAWmF,GAC3Bpb,EACAA,EAAMsG,QACNiS,EACAmL,OACAxe,EACA6R,EACAsE,EACAV,IAKF,GAAI3a,EAAMqX,SAASH,IAAIjX,GAAM,CAC3B,IAAIqb,EAAcC,GAAejG,EAAaxO,MAC9C9G,EAAMqX,SAASnH,IAAIjQ,EAAKqb,EAC1B,CAEAwI,GAAqBqD,GAMQ,YAA3BnnB,EAAM8c,WAAW9c,OACjBmnB,EAAS3G,GAETrhB,EAAU4gB,EAAe,2BACzBP,GAA+BA,EAA4BxQ,QAE3DsS,GAAmBthB,EAAM8c,WAAWjd,SAAU,CAC5CyG,UACAM,aACAqP,SACAoB,SAAU,IAAIwI,IAAI7f,EAAMqX,cAM1BwJ,GAAY,CACV5K,SACArP,WAAY4U,GACVxb,EAAM4G,WACNA,EACAN,EACA2P,GAEFoB,SAAU,IAAIwI,IAAI7f,EAAMqX,YAE1BvC,GAAyB,EAE7B,CA3RIwS,CACErnB,EACAgX,EACA/V,EACAyF,EACAL,EACA8a,EACAnN,IAOJiB,GAAiBhF,IAAIjQ,EAAK,CAAEgX,UAAS/V,SAgRvCgO,eACEjP,EACAgX,EACA/V,EACAyF,EACAL,EACA8a,EACAnN,GAEA,IAAI4S,EAAkB7mB,EAAMqX,SAAS9I,IAAItO,GACzCqkB,GACErkB,EACAgd,GACEhJ,EACA4S,EAAkBA,EAAgB/f,UAAO5B,GAE3C,CAAEkc,cAIJ,IAAI2F,EAAkB,IAAIzZ,gBACtB0Z,EAAexM,GACjBzM,EAAK9L,QACLf,EACA6lB,EAAgBtZ,QAElB6S,EAAiBpQ,IAAIjQ,EAAK8mB,GAE1B,IAAIE,EAAoB1G,EAOpBlY,SANgBwa,GAClB,SACAmE,EACA,CAACrgB,GACDL,IAEmB,GAMjB6U,GAAiB9S,KACnBA,QACSqU,GAAoBrU,EAAQ2e,EAAavZ,QAAQ,IACxDpF,GAKAiY,EAAiB/R,IAAItO,KAAS8mB,GAChCzG,EAAiB7R,OAAOxO,GAG1B,GAAI+mB,EAAavZ,OAAOe,QACtB,OAKF,GAAIyG,GAAgBiC,IAAIjX,GAEtB,YADAqkB,GAAmBrkB,EAAKsb,QAAerW,IAKzC,GAAI8V,GAAiB3S,GACnB,OAAImY,EAA0ByG,OAG5B3C,GAAmBrkB,EAAKsb,QAAerW,KAGvCiQ,GAAiBnH,IAAI/N,cACf8iB,GAAwBiE,EAAc3e,IAMhD,GAAIkN,GAAclN,GAEhB,YADAkc,GAAgBtkB,EAAKgX,EAAS5O,EAAO3E,OAIvCvE,GAAWgc,GAAiB9S,GAAS,mCAGrCic,GAAmBrkB,EAAKsb,GAAelT,EAAOvB,MAChD,CAvWEygB,CACEtnB,EACAgX,EACA/V,EACAyF,EACAL,EACA8a,EACAnN,GAEJ,EA84BEuT,WAh+CF,WACE7E,KACA9B,GAAY,CAAEjB,aAAc,YAIG,eAA3B5f,EAAM8c,WAAW9c,QAOU,SAA3BA,EAAM8c,WAAW9c,MAUrBiiB,GACElC,GAAiB/f,EAAMyf,cACvBzf,EAAM8c,WAAWjd,SACjB,CAAE0iB,mBAAoBviB,EAAM8c,aAZ5BmF,GAAgBjiB,EAAMyf,cAAezf,EAAMH,SAAU,CACnDqiB,gCAAgC,IAatC,EAu8CEzgB,WAAapB,GAAW0N,EAAK9L,QAAQR,WAAWpB,GAChD+C,eAAiB/C,GAAW0N,EAAK9L,QAAQmB,eAAe/C,GACxDmkB,cACAnD,cA5PF,SAAqCphB,GACnC,GAAIkS,EAAOoM,kBAAmB,CAC5B,IAAIkJ,GAAS/G,GAAenS,IAAItO,IAAQ,GAAK,EACzCwnB,GAAS,GACX/G,GAAejS,OAAOxO,GACtBgV,GAAgBjH,IAAI/N,IAEpBygB,GAAexQ,IAAIjQ,EAAKwnB,EAE5B,MACEpG,GAAcphB,GAEhB4gB,GAAY,CAAExJ,SAAU,IAAIwI,IAAI7f,EAAMqX,WACxC,EAgPEqQ,QAhzDF,WACM9I,GACFA,IAEEwB,GACFA,IAEFtT,EAAY6a,QACZnI,GAA+BA,EAA4BxQ,QAC3DhP,EAAMqX,SAAS7P,SAAQ,CAACqC,EAAG5J,IAAQohB,GAAcphB,KACjDD,EAAM8f,SAAStY,SAAQ,CAACqC,EAAG5J,IAAQ4kB,GAAc5kB,IACnD,EAsyDE2nB,WA/LF,SAAoB3nB,EAAagD,GAC/B,IAAI+hB,EAAmBhlB,EAAM8f,SAASvR,IAAItO,IAAQqR,EAMlD,OAJIqP,GAAiBpS,IAAItO,KAASgD,GAChC0d,GAAiBzQ,IAAIjQ,EAAKgD,GAGrB+hB,CACT,EAwLEH,iBACAgD,0BAA2BvH,EAC3BwH,yBAA0BnN,GAG1BoN,mBA7CF,SAA4BC,GAC1BxjB,EAAW,CAAA,EACX2Z,EAAqB/Z,EACnB4jB,EACA1jB,OACAY,EACAV,EAEJ,GAwCO4a,CACT,wBA2BO,SACL/a,EACA4O,GAEA9T,EACEkF,EAAOwB,OAAS,EAChB,oEAGF,IAEIvB,EAFAE,EAA0B,CAAA,EAC1Ba,GAAY4N,EAAOA,EAAK5N,SAAW,OAAS,IAEhD,GAAQ,MAAJ4N,GAAAA,EAAM3O,mBACRA,EAAqB2O,EAAK3O,wBACrB,SAAI2O,GAAAA,EAAMiL,oBAAqB,CAEpC,IAAIA,EAAsBjL,EAAKiL,oBAC/B5Z,EAAsBI,IAAW,CAC/BiN,iBAAkBuM,EAAoBxZ,IAE1C,MACEJ,EAAqBoN,EAGvB,IAAIS,EAAiC7R,EAAA,CACnCkL,sBAAsB,EACtB4G,qBAAqB,GACjBa,EAAOA,EAAKd,OAAS,MAGvBkM,EAAaja,EACfC,EACAC,OACAY,EACAV,GA+MF0K,eAAe+Y,EACbhW,EACApS,EACAyG,EACAkS,EACA8F,EACA1D,EACAsN,GAEA/oB,EACE8S,EAAQxE,OACR,wEAGF,IACE,GAAImG,GAAiB3B,EAAQK,OAAOhI,eAAgB,CAClD,IAAIjC,QA8CV6G,eACE+C,EACA3L,EACAsc,EACApK,EACA8F,EACA1D,EACA1I,GAEA,IAAI7J,EAEJ,GAAKua,EAAYle,MAAMxC,QAAW0gB,EAAYle,MAAMoR,KAa7C,CAULzN,SAToBwa,EAClB,SACA5Q,EACA,CAAC2Q,GACDtc,EACA4L,EACAsG,EACA8F,IAEe,GAEbrM,EAAQxE,OAAOe,SACjBwD,EAA+BC,EAASC,EAAgBC,EAE5D,KA5B0D,CACxD,IAAIzO,EAAQ2P,GAAuB,IAAK,CACtCf,OAAQL,EAAQK,OAChB/R,SAAU,IAAIuC,IAAImP,EAAQ5O,KAAK9C,SAC/B0W,QAAS2L,EAAYle,MAAME,KAE7B,GAAIsN,EACF,MAAMxO,EAER2E,EAAS,CACPmL,KAAMvP,EAAWP,MACjBA,QAEJ,CAiBA,GAAIsX,GAAiB3S,GAKnB,MAAM,IAAI8H,SAAS,KAAM,CACvBJ,OAAQ1H,EAAO6R,SAASnK,OACxBC,QAAS,CACPmY,SAAU9f,EAAO6R,SAASlK,QAAQzB,IAAI,eAK5C,GAAI4M,GAAiB9S,GAAS,CAC5B,IAAI3E,EAAQ2P,GAAuB,IAAK,CAAEG,KAAM,iBAChD,GAAItB,EACF,MAAMxO,EAER2E,EAAS,CACPmL,KAAMvP,EAAWP,MACjBA,QAEJ,CAEA,GAAIwO,EAAgB,CAGlB,GAAIqD,GAAclN,GAChB,MAAMA,EAAO3E,MAGf,MAAO,CACL4C,QAAS,CAACsc,GACVhc,WAAY,CAAE,EACdiV,WAAY,CAAE,CAAC+G,EAAYle,MAAME,IAAKyD,EAAOvB,MAC7CmP,OAAQ,KAGRN,WAAY,IACZmF,cAAe,CAAE,EACjBsN,cAAe,CAAE,EACjBzN,gBAAiB,KAErB,CAGA,IAAI0N,EAAgB,IAAI5N,QAAQxI,EAAQ5O,IAAK,CAC3C2M,QAASiC,EAAQjC,QACjBF,SAAUmC,EAAQnC,SAClBrC,OAAQwE,EAAQxE,SAGlB,GAAI8H,GAAclN,GAAS,CAGzB,IAAI4S,EAAgBL,EAChBgI,EACA1H,GAAoB5U,EAASsc,EAAYle,MAAME,IAanD,OAAAtE,WAXoBgoB,EAClBD,EACA/hB,EACAkS,EACA8F,EACA1D,EACA,KACA,CAACK,EAAcvW,MAAME,GAAIyD,IAKf,CACVsN,WAAYpF,EAAqBlI,EAAO3E,OACpC2E,EAAO3E,MAAMqM,OACQ,MAArB1H,EAAOsN,WACPtN,EAAOsN,WACP,IACJkG,WAAY,KACZuM,cAAa9nB,EAAA,GACP+H,EAAO2H,QAAU,CAAE,CAAC4S,EAAYle,MAAME,IAAKyD,EAAO2H,SAAY,KAGxE,CAWA,OAAA1P,WAToBgoB,EAClBD,EACA/hB,EACAkS,EACA8F,EACA1D,EACA,MAIU,CACViB,WAAY,CACV,CAAC+G,EAAYle,MAAME,IAAKyD,EAAOvB,OAG7BuB,EAAOsN,WAAa,CAAEA,WAAYtN,EAAOsN,YAAe,GAAE,CAC9DyS,cAAe/f,EAAO2H,QAClB,CAAE,CAAC4S,EAAYle,MAAME,IAAKyD,EAAO2H,SACjC,CAAC,GAET,CA/LyBuY,CACjBtW,EACA3L,EACA4hB,GAAc3Q,GAAejR,EAASzG,GACtC2Y,EACA8F,EACA1D,EACc,MAAdsN,GAEF,OAAO7f,CACT,CAEA,IAAIA,QAAeigB,EACjBrW,EACA3L,EACAkS,EACA8F,EACA1D,EACAsN,GAEF,OAAOxO,GAAWrR,GACdA,EAAM/H,EAAA,CAAA,EAED+H,EAAM,CACTwT,WAAY,KACZuM,cAAe,CAAC,GAkBxB,CAhBE,MAAOzoB,GAIP,GA6nDN,SAAyB0I,GACvB,OACY,MAAVA,GACkB,iBAAXA,GACP,SAAUA,GACV,WAAYA,IACXA,EAAOmL,OAASvP,EAAW6C,MAAQuB,EAAOmL,OAASvP,EAAWP,MAEnE,CAroDU8kB,CAAgB7oB,IAAM+Z,GAAW/Z,EAAE0I,QAAS,CAC9C,GAAI1I,EAAE6T,OAASvP,EAAWP,MACxB,MAAM/D,EAAE0I,OAEV,OAAO1I,EAAE0I,MACX,CAGA,GAuqDN,SAA4BA,GAC1B,IAAKqR,GAAWrR,GACd,OAAO,EAGT,IAAI0H,EAAS1H,EAAO0H,OAChBlQ,EAAWwI,EAAO2H,QAAQzB,IAAI,YAClC,OAAOwB,GAAU,KAAOA,GAAU,KAAmB,MAAZlQ,CAC3C,CA/qDU4oB,CAAmB9oB,GACrB,OAAOA,EAET,MAAMA,CACR,CACF,CAqJAuP,eAAeoZ,EACbrW,EACA3L,EACAkS,EACA8F,EACA1D,EACAsN,EACA7S,GAQA,IAAInD,EAA+B,MAAdgW,EAGrB,GACEhW,IACCgW,MAAAA,IAAAA,EAAYxjB,MAAMqR,UAClBmS,MAAAA,IAAAA,EAAYxjB,MAAMoR,MAEnB,MAAMzC,GAAuB,IAAK,CAChCf,OAAQL,EAAQK,OAChB/R,SAAU,IAAIuC,IAAImP,EAAQ5O,KAAK9C,SAC/B0W,QAAmB,MAAViR,OAAU,EAAVA,EAAYxjB,MAAME,KAI/B,IAKI2T,GALiB2P,EACjB,CAACA,GACD7S,GAAuBE,GAAcF,EAAoB,IACzDf,GAA8BhO,EAAS+O,EAAoB,IAC3D/O,GAC+BsC,QAChC8L,GAAMA,EAAEhQ,MAAMqR,QAAUrB,EAAEhQ,MAAMoR,OAInC,GAA6B,IAAzByC,EAAc1S,OAChB,MAAO,CACLS,UAEAM,WAAYN,EAAQuC,QAClB,CAAC8E,EAAK+G,IAAMpL,OAAOzF,OAAO8J,EAAK,CAAE,CAAC+G,EAAEhQ,MAAME,IAAK,QAC/C,CAAA,GAEFqR,OACEZ,GAAuBE,GAAcF,EAAoB,IACrD,CACE,CAACA,EAAoB,IAAKA,EAAoB,GAAG3R,OAEnD,KACNiS,WAAY,IACZmF,cAAe,CAAE,EACjBH,gBAAiB,MAIrB,IAAIhC,QAAgBkK,EAClB,SACA5Q,EACAsG,EACAjS,EACA4L,EACAsG,EACA8F,GAGErM,EAAQxE,OAAOe,SACjBwD,EAA+BC,EAASC,EAAgBC,GAI1D,IAAIwI,EAAkB,IAAIkF,IACtBxG,EAAUqB,GACZpU,EACAiS,EACAI,EACAtD,EACAsF,EACAC,GAIE8N,EAAkB,IAAIvkB,IACxBoU,EAAc9T,KAAKkC,GAAUA,EAAMjC,MAAME,MAQ3C,OANA0B,EAAQkB,SAASb,IACV+hB,EAAgBxR,IAAIvQ,EAAMjC,MAAME,MACnCyU,EAAQzS,WAAWD,EAAMjC,MAAME,IAAM,KACvC,IAGFtE,KACK+Y,EAAO,CACV/S,UACAqU,gBACEA,EAAgBvL,KAAO,EACnB9F,OAAOqf,YAAYhO,EAAgBjN,WACnC,MAEV,CAIAwB,eAAe2T,EACbrP,EACAvB,EACAsG,EACAjS,EACA4L,EACAsG,EACA8F,GAEA,IAAI3F,QAAgBN,GAClBiG,GAAyBnG,GACzB3E,EACAvB,EACAsG,EACAjS,EACA9B,EACAF,EACAkU,GAGF,aAAarL,QAAQiL,IACnBO,EAAQlU,KAAI,CAAC4D,EAAQrC,KACnB,GAAIoW,GAAwB/T,GAAS,CAGnC,MAAM4R,GAFS5R,EAAOA,OAIpB4J,EACAsG,EAAcvS,GAAGtB,MAAME,GACvB0B,EACAjB,EACA8M,EAAO3G,qBAEX,CACA,GAAIkO,GAAWrR,EAAOA,SAAW6J,EAG/B,MAAM7J,EAGR,OAAOmR,GAAiCnR,EAAO,IAGrD,CAEA,MAAO,CACLgW,aACAuK,MA7hBF1Z,eACE+C,EAAgB4W,GAU0B,IAT1CrQ,eACEA,EAAcoC,wBACdA,EAAuB0D,sBACvBA,QAKD,IAAAuK,EAAG,CAAA,EAAEA,EAEFxlB,EAAM,IAAIP,IAAImP,EAAQ5O,KACtBiP,EAASL,EAAQK,OACjBzS,EAAWM,EAAe,GAAIY,EAAWsC,GAAM,KAAM,WACrDiD,EAAUnB,EAAYkZ,EAAYxe,EAAUwF,GAGhD,IAAK+N,GAAcd,IAAsB,SAAXA,EAAmB,CAC/C,IAAI5O,EAAQ2P,GAAuB,IAAK,CAAEf,YACpChM,QAASwiB,EAAuBpkB,MAAEA,GACtCsX,GAAuBqC,GACzB,MAAO,CACLhZ,WACAxF,WACAyG,QAASwiB,EACTliB,WAAY,CAAE,EACdiV,WAAY,KACZ5F,OAAQ,CACN,CAACvR,EAAME,IAAKlB,GAEdiS,WAAYjS,EAAMqM,OAClB+K,cAAe,CAAE,EACjBsN,cAAe,CAAE,EACjBzN,gBAAiB,KAErB,CAAO,IAAKrU,EAAS,CACnB,IAAI5C,EAAQ2P,GAAuB,IAAK,CAAE9S,SAAUV,EAASU,YACvD+F,QAASkc,EAAe9d,MAAEA,GAC9BsX,GAAuBqC,GACzB,MAAO,CACLhZ,WACAxF,WACAyG,QAASkc,EACT5b,WAAY,CAAE,EACdiV,WAAY,KACZ5F,OAAQ,CACN,CAACvR,EAAME,IAAKlB,GAEdiS,WAAYjS,EAAMqM,OAClB+K,cAAe,CAAE,EACjBsN,cAAe,CAAE,EACjBzN,gBAAiB,KAErB,CAEA,IAAItS,QAAe4f,EACjBhW,EACApS,EACAyG,EACAkS,EACA8F,GAAyB,MACG,IAA5B1D,EACA,MAEF,OAAIlB,GAAWrR,GACNA,EAMT/H,EAAA,CAAST,WAAUwF,YAAagD,EAClC,EAqdE0gB,WAzbF7Z,eACE+C,EAAgB+W,GAUF,IATd/R,QACEA,EAAOuB,eACPA,EAAc8F,sBACdA,QAKD,IAAA0K,EAAG,CAAA,EAAEA,EAEF3lB,EAAM,IAAIP,IAAImP,EAAQ5O,KACtBiP,EAASL,EAAQK,OACjBzS,EAAWM,EAAe,GAAIY,EAAWsC,GAAM,KAAM,WACrDiD,EAAUnB,EAAYkZ,EAAYxe,EAAUwF,GAGhD,IAAK+N,GAAcd,IAAsB,SAAXA,GAAgC,YAAXA,EACjD,MAAMe,GAAuB,IAAK,CAAEf,WAC/B,IAAKhM,EACV,MAAM+M,GAAuB,IAAK,CAAE9S,SAAUV,EAASU,WAGzD,IAAIoG,EAAQsQ,EACR3Q,EAAQyV,MAAMrH,GAAMA,EAAEhQ,MAAME,KAAOqS,IACnCM,GAAejR,EAASzG,GAE5B,GAAIoX,IAAYtQ,EACd,MAAM0M,GAAuB,IAAK,CAChC9S,SAAUV,EAASU,SACnB0W,YAEG,IAAKtQ,EAEV,MAAM0M,GAAuB,IAAK,CAAE9S,SAAUV,EAASU,WAGzD,IAAI8H,QAAe4f,EACjBhW,EACApS,EACAyG,EACAkS,EACA8F,GAAyB,MACzB,EACA3X,GAGF,GAAI+S,GAAWrR,GACb,OAAOA,EAGT,IAAI3E,EAAQ2E,EAAO4N,OAAS3M,OAAO2f,OAAO5gB,EAAO4N,QAAQ,QAAK/Q,EAC9D,QAAcA,IAAVxB,EAKF,MAAMA,EAIR,GAAI2E,EAAOwT,WACT,OAAOvS,OAAO2f,OAAO5gB,EAAOwT,YAAY,GAG1C,GAAIxT,EAAOzB,WAAY,CAAA,IAAAsiB,EACrB,IAAIpiB,EAAOwC,OAAO2f,OAAO5gB,EAAOzB,YAAY,GAI5C,OAHIsiB,OAAJA,EAAI7gB,EAAOsS,kBAAPuO,EAAyBviB,EAAMjC,MAAME,MACvCkC,EAAKgL,GAA0BzJ,EAAOsS,gBAAgBhU,EAAMjC,MAAME,KAE7DkC,CACT,CAGF,EAgXF,UDx9DoC,SAACA,EAAMiH,GAGzC,YAH6C,IAAJA,IAAAA,EAAO,CAAA,GAGzC,IAAIvB,EAAa1F,EAFW,iBAATiH,EAAoB,CAAEgC,OAAQhC,GAASA,EAGnE,iBAjtBO,SACLob,EACAtiB,QAEC,IAFDA,IAAAA,EAEI,CAAA,GAEJ,IAAI3F,EAAeioB,EACfjoB,EAAKgH,SAAS,MAAiB,MAAThH,IAAiBA,EAAKgH,SAAS,QACvD3I,GACE,EACA,eAAe2B,EAAf,oCACMA,EAAK2B,QAAQ,MAAO,MAD1B,qIAGsC3B,EAAK2B,QAAQ,MAAO,MAAK,MAEjE3B,EAAOA,EAAK2B,QAAQ,MAAO,OAI7B,MAAMumB,EAASloB,EAAKkG,WAAW,KAAO,IAAM,GAEtCiE,EAAage,GACZ,MAALA,EAAY,GAAkB,iBAANA,EAAiBA,EAAIrV,OAAOqV,GA4BtD,OAAOD,EA1BUloB,EACd4G,MAAM,OACNrD,KAAI,CAACqE,EAAShJ,EAAOwpB,KAIpB,GAHsBxpB,IAAUwpB,EAAMzjB,OAAS,GAGd,MAAZiD,EAAiB,CAGpC,OAAOuC,EAAUxE,EAFJ,KAGf,CAEA,MAAM0iB,EAAWzgB,EAAQnC,MAAM,oBAC/B,GAAI4iB,EAAU,CACZ,OAAStpB,EAAKupB,GAAYD,EAC1B,IAAIE,EAAQ5iB,EAAO5G,GAEnB,OADAd,EAAuB,MAAbqqB,GAA6B,MAATC,EAAa,aAAexpB,EAAG,WACtDoL,EAAUoe,EACnB,CAGA,OAAO3gB,EAAQjG,QAAQ,OAAQ,GAAG,IAGnC+F,QAAQE,KAAcA,IAEAjE,KAAK,IAChC,8BC8nFO,SACLR,EACAgV,EACA3V,GASA,OAPoCpD,EAAA,CAAA,EAC/B+Y,EAAO,CACV1D,WAAYpF,EAAqB7M,GAASA,EAAMqM,OAAS,IACzDkG,OAAQ,CACN,CAACoD,EAAQqQ,4BAA8BrlB,EAAO,GAAGO,IAAKlB,IAI5D,kBDtvEO,SAAuBrD,GAE5B,MAAc,KAAPA,GAAuC,KAAzBA,EAAYE,SAC7B,IACc,iBAAPF,EACPK,EAAUL,GAAIE,SACdF,EAAGE,QACT,oEAuCkC,SAACuG,EAAMiH,QAAI,IAAJA,IAAAA,EAAO,CAAA,GAC9C,IAAIrB,EAA+B,iBAATqB,EAAoB,CAAEgC,OAAQhC,GAASA,EAE7DiC,EAAU,IAAIC,QAAQvD,EAAasD,SAKvC,OAJKA,EAAQkH,IAAI,iBACflH,EAAQE,IAAI,eAAgB,mCAGvB,IAAIC,SAAS/E,KAAKC,UAAUvE,GAAKxG,EAAA,CAAA,EACnCoM,EAAY,CACfsD,YAEJ,oGAgPkD2Z,CAACtmB,EAAK0K,KACtD,IAAImM,EAAWpK,EAASzM,EAAK0K,GAE7B,OADAmM,EAASlK,QAAQE,IAAI,0BAA2B,QACzCgK,CAAQ"}